{"id":"tijmenvangulik.examples.custom.export","name":"Examples custom export","description":"Demo how to write a custom cxport","version":"1.0","author":"Tijmen van Gulik","url":"https://tijmenvangulik.github.io/Ergometerspace/data/plugins/TijmenVanGulik/Examples/CustomExportDemo.json","script":"var tijmenvangulik_examples_export_demo;\r\n(function (tijmenvangulik_examples_export_demo) {\r\n    class ExamplePlugin extends ExternalPlugin {\r\n        exportTcx(exportItem) {\r\n            //Forming first part of the TCX file\r\n            var TCXcontent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?><TrainingCenterDatabase\n  xsi:schemaLocation=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd\"\n  xmlns:ns5=\"http://www.garmin.com/xmlschemas/ActivityGoals/v1\"\n  xmlns:ns3=\"http://www.garmin.com/xmlschemas/ActivityExtension/v2\"\n  xmlns:ns2=\"http://www.garmin.com/xmlschemas/UserProfile/v2\"\n  xmlns=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:ns4=\"http://www.garmin.com/xmlschemas/ProfileExtension/v1\">\n  <Activities>\n    <Activity Sport=\"Other\">\n      <Id>${exportItem.timeStampDate.toISOString()}</Id>    \n      <Lap StartTime=\"${exportItem.timeStampDate.toISOString()}\">\n        <TotalTimeSeconds>${exportItem.endDuration / 1000}</TotalTimeSeconds>\n        <DistanceMeters>${exportItem.endDistance}</DistanceMeters>\n        <Calories>${Math.round(exportItem.totalCalories)}</Calories>       \n        <TriggerMethod>Distance</TriggerMethod>\n        <Track\\>\n`;\r\n            if (exportItem.strokes) {\r\n                //Creating TCX trackpoints via iterating across log.strokes \r\n                //for ergometer space the timestamp is at the moment loged so the end, substract the duration\r\n                var startDate = exportItem.timeStampDate.getTime() - exportItem.endDuration;\r\n                var prefDistance = -1;\r\n                for (let i = 0; i < exportItem.strokes.length - 1; i++) {\r\n                    var stroke = exportItem.strokes[i];\r\n                    //make sure that we make some distance for an acurate speed calculation\r\n                    if (stroke.distance > prefDistance + 1) {\r\n                        var timestamp = new Date(startDate + stroke.workTime.getTime());\r\n                        //make sure there is a map os and if not do not add\r\n                        var mapPos = ergometerWidgets.mapWidget ? ergometerWidgets.mapWidget.distanceToMapPosition(stroke.distance) : null;\r\n                        TCXcontent += `          <Trackpoint>\n            <Time>${timestamp.toISOString()}</Time>\n            ${mapPos ? `<Position>\n              <LatitudeDegrees>${mapPos.latitude}</LatitudeDegrees>\n              <LongitudeDegrees>${mapPos.longitude}</LongitudeDegrees>\n            </Position>` : ``}           \n            <DistanceMeters>${stroke.distance}</DistanceMeters>\n            ${stroke.heartRate > 0 ? `<HeartRateBpm>\n             <Value>${stroke.heartRate}</Value>\n            </HeartRateBpm>` : ``}\n            <Cadence>${stroke.strokesPerMinute}</Cadence>\n            <Extensions>\n              <ns3:TPX>\n                <ns3:Watts>${stroke.power.toString()}</ns3:Watts>            \n              </ns3:TPX>\n            </Extensions>          \n          </Trackpoint>                    \n`;\r\n                    }\r\n                    prefDistance = stroke.distance;\r\n                }\r\n            }\r\n            // adding TCX ending content\r\n            TCXcontent += `        </Track>\n      </Lap>\n      <Notes>${utilities.htmlEncode(exportItem.description ? exportItem.description : \"\")}</Notes>\n      <Creator xsi:type=\"Device_t\">\n        <Name>--No GPS SELECTED--</Name>\n        <UnitId>0</UnitId>\n        <ProductID>0</ProductID>\n        <Version>\n          <VersionMajor>0</VersionMajor>\n          <VersionMinor>0</VersionMinor>\n          <BuildMajor>1</BuildMajor>\n          <BuildMinor>1</BuildMinor>\n        </Version>\n      </Creator>\n    </Activity>\n   </Activities>\n   <Author xsi:type=\"Application_t\">\n    <Name>Ergometer Space</Name>\n    <Build>\n      <Version>\n        <VersionMajor>5</VersionMajor>\n        <VersionMinor>4</VersionMinor>\n        <BuildMajor>2</BuildMajor>\n        <BuildMinor>0</BuildMinor>\n      </Version>\n    </Build>\n    <LangID>en</LangID>\n    <PartNumber>1</PartNumber>\n  </Author>\n</TrainingCenterDatabase>`;\r\n            return TCXcontent;\r\n        }\r\n        exportCSV(log) {\r\n            let exportData = [];\r\n            var heartRateZones = (Array.isArray(log.heartRateZones) && log.heartRateZones.length == 5) ? log.heartRateZones : [0, 0, 0, 0, 0];\r\n            var data = {\r\n                training: pm3.getTrainingDataCaption(log),\r\n                timeStamp: log.timeStampDate,\r\n                duration: utilities.formatRelativeTime(new Date(log.endDuration)),\r\n                distance: log.endDistance,\r\n                drag: log.lastStroke.dragFactor,\r\n                split: utilities.formatRelativeTime(pm3.calcTrainingDataSplitTime(log)),\r\n                description: log.description,\r\n                heartrate_zone1: utilities.formatRelativeTime(new Date(heartRateZones[4])),\r\n                heartrate_zone2: utilities.formatRelativeTime(new Date(heartRateZones[3])),\r\n                heartrate_zone3: utilities.formatRelativeTime(new Date(heartRateZones[2])),\r\n                heartrate_zone4: utilities.formatRelativeTime(new Date(heartRateZones[1])),\r\n                heartrate_zone5: utilities.formatRelativeTime(new Date(heartRateZones[0])),\r\n                totalCalories: log.totalCalories ?? 0,\r\n                power: log.averagePower ?? 0,\r\n                strokeCount: log.lastStroke?.strokeCount ?? 0\r\n            };\r\n            exportData.push(data);\r\n            return utilities.convertArrayOfObjectsToCSV({ data: exportData });\r\n        }\r\n        init() {\r\n            pm3.log.registerCustomExport(this, \"Demo export garmin tcx\", \"demo.xml\", \"application/xml\", this.exportTcx);\r\n            pm3.log.registerCustomExport(this, \"Demo CSV export\", \"demo.csv\", \"text/csv;charset=utf-8\", this.exportCSV);\r\n        }\r\n        remove() {\r\n            pm3.log.deRegisterCustomExport(this.exportTcx);\r\n            pm3.log.deRegisterCustomExport(this.exportCSV);\r\n        }\r\n    }\r\n    var plugin;\r\n    plugin = new ExamplePlugin();\r\n})(tijmenvangulik_examples_export_demo || (tijmenvangulik_examples_export_demo = {}));\r\n","styles":"","typeScript":"module tijmenvangulik_examples_export_demo { //make a name space to prevent mix ups\n\n\n    class ExamplePlugin extends ExternalPlugin {\n        private _oldExport  : any;\n\n        public  exportTcx(exportItem : pm3.WorkoutLogItem) : string {\n\n\n            //Forming first part of the TCX file\n            var TCXcontent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?><TrainingCenterDatabase\n  xsi:schemaLocation=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd\"\n  xmlns:ns5=\"http://www.garmin.com/xmlschemas/ActivityGoals/v1\"\n  xmlns:ns3=\"http://www.garmin.com/xmlschemas/ActivityExtension/v2\"\n  xmlns:ns2=\"http://www.garmin.com/xmlschemas/UserProfile/v2\"\n  xmlns=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:ns4=\"http://www.garmin.com/xmlschemas/ProfileExtension/v1\">\n  <Activities>\n    <Activity Sport=\"Other\">\n      <Id>${exportItem.timeStampDate.toISOString()}</Id>    \n      <Lap StartTime=\"${exportItem.timeStampDate.toISOString()}\">\n        <TotalTimeSeconds>${exportItem.endDuration/1000}</TotalTimeSeconds>\n        <DistanceMeters>${exportItem.endDistance}</DistanceMeters>\n        <Calories>${Math.round(exportItem.totalCalories)}</Calories>       \n        <TriggerMethod>Distance</TriggerMethod>\n        <Track\\>\n`          \n            if (exportItem.strokes) {\n              //Creating TCX trackpoints via iterating across log.strokes \n              //for ergometer space the timestamp is at the moment loged so the end, substract the duration\n              var startDate = exportItem.timeStampDate.getTime()-exportItem.endDuration;\n              var prefDistance=-1;\n              for(let i = 0; i < exportItem.strokes.length-1; i++){\n                var stroke=exportItem.strokes[i];\n                //make sure that we make some distance for an acurate speed calculation\n                if (stroke.distance>prefDistance+1) {\n                  var timestamp = new Date(startDate+stroke.workTime.getTime());\n                  //make sure there is a map os and if not do not add\n                  var mapPos=ergometerWidgets.mapWidget?ergometerWidgets.mapWidget.distanceToMapPosition(stroke.distance):null;\n                  TCXcontent += `          <Trackpoint>\n            <Time>${timestamp.toISOString()}</Time>\n            ${mapPos?`<Position>\n              <LatitudeDegrees>${mapPos.latitude}</LatitudeDegrees>\n              <LongitudeDegrees>${mapPos.longitude}</LongitudeDegrees>\n            </Position>`:``}           \n            <DistanceMeters>${stroke.distance}</DistanceMeters>\n            ${stroke.heartRate>0?`<HeartRateBpm>\n             <Value>${stroke.heartRate}</Value>\n            </HeartRateBpm>`:``}\n            <Cadence>${stroke.strokesPerMinute}</Cadence>\n            <Extensions>\n              <ns3:TPX>\n                <ns3:Watts>${stroke.power.toString()}</ns3:Watts>            \n              </ns3:TPX>\n            </Extensions>          \n          </Trackpoint>                    \n`\n                }\n                prefDistance=stroke.distance\n              }\n            }\n            \n\n            // adding TCX ending content\n            TCXcontent += `        </Track>\n      </Lap>\n      <Notes>${utilities.htmlEncode(exportItem.description?exportItem.description:\"\") }</Notes>\n      <Creator xsi:type=\"Device_t\">\n        <Name>--No GPS SELECTED--</Name>\n        <UnitId>0</UnitId>\n        <ProductID>0</ProductID>\n        <Version>\n          <VersionMajor>0</VersionMajor>\n          <VersionMinor>0</VersionMinor>\n          <BuildMajor>1</BuildMajor>\n          <BuildMinor>1</BuildMinor>\n        </Version>\n      </Creator>\n    </Activity>\n   </Activities>\n   <Author xsi:type=\"Application_t\">\n    <Name>Ergometer Space</Name>\n    <Build>\n      <Version>\n        <VersionMajor>5</VersionMajor>\n        <VersionMinor>4</VersionMinor>\n        <BuildMajor>2</BuildMajor>\n        <BuildMinor>0</BuildMinor>\n      </Version>\n    </Build>\n    <LangID>en</LangID>\n    <PartNumber>1</PartNumber>\n  </Author>\n</TrainingCenterDatabase>`\n\n          return TCXcontent\n\n        }\n        public exportCSV(log : pm3.WorkoutLogItem) : string {\n            let exportData=[];\n        \n            var heartRateZones=(Array.isArray(log.heartRateZones) && log.heartRateZones.length==5)?log.heartRateZones:[0,0,0,0,0];\n            \n            var data={\n                training: pm3.getTrainingDataCaption(log),\n                timeStamp: log.timeStampDate,\n                duration: utilities.formatRelativeTime(new Date(log.endDuration)),\n                distance: log.endDistance,\n                drag:log.lastStroke.dragFactor,\n                split: utilities.formatRelativeTime( pm3.calcTrainingDataSplitTime(log) ),\n                description: log.description,\n                heartrate_zone1:utilities.formatRelativeTime(new Date(heartRateZones[4])),\n                heartrate_zone2:utilities.formatRelativeTime(new Date(heartRateZones[3])),\n                heartrate_zone3:utilities.formatRelativeTime(new Date(heartRateZones[2])),\n                heartrate_zone4:utilities.formatRelativeTime(new Date(heartRateZones[1])),\n                heartrate_zone5:utilities.formatRelativeTime(new Date(heartRateZones[0])),\n                totalCalories: log.totalCalories??0,\n                power:log.averagePower??0,\n                strokeCount:log.lastStroke?.strokeCount??0            \n            }            \n            exportData.push(data);\n\n            return utilities.convertArrayOfObjectsToCSV({data: exportData});\n\n        }\n        public init() {\n            pm3.log.registerCustomExport(this,\"Demo export garmin tcx\",\"demo.xml\",\"application/xml\",this.exportTcx);  \n            pm3.log.registerCustomExport(this,\"Demo CSV export\",\"demo.csv\",\"text/csv;charset=utf-8\",this.exportCSV);       \n     \n        }\n        public remove() {\n            pm3.log.deRegisterCustomExport(this.exportTcx);\n            pm3.log.deRegisterCustomExport(this.exportCSV);\n        }               \n    }\n\n    var plugin : ExamplePlugin;\n    plugin = new ExamplePlugin();\n    \n}","html":""}