{"id":"tijmenvangulik.examples.custom.export","name":"Examples custom export","description":"Demo how to write a custom cxport","version":"1.0","author":"Tijmen van Gulik","url":"https://tijmenvangulik.github.io/Ergometerspace/data/plugins/TijmenVanGulik/Examples/CustomExportDemo.json","script":"var tijmenvangulik_examples_export_demo;\r\n(function (tijmenvangulik_examples_export_demo) {\r\n    class ExamplePlugin extends ExternalPlugin {\r\n        exportXmlDemo(exportItem) {\r\n            var data = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <value>${exportItem.timeStampDate.toISOString()}</value>\n</xml>\n`;\r\n            return data;\r\n        }\r\n        exportCSV(log) {\r\n            let exportData = [];\r\n            var heartRateZones = (Array.isArray(log.heartRateZones) && log.heartRateZones.length == 5) ? log.heartRateZones : [0, 0, 0, 0, 0];\r\n            var data = {\r\n                training: pm3.getTrainingDataCaption(log),\r\n                timeStamp: log.timeStampDate,\r\n                duration: utilities.formatRelativeTime(new Date(log.endDuration)),\r\n                distance: log.endDistance,\r\n                drag: log.lastStroke.dragFactor,\r\n                split: utilities.formatRelativeTime(pm3.calcTrainingDataSplitTime(log)),\r\n                description: log.description,\r\n                heartrate_zone1: utilities.formatRelativeTime(new Date(heartRateZones[4])),\r\n                heartrate_zone2: utilities.formatRelativeTime(new Date(heartRateZones[3])),\r\n                heartrate_zone3: utilities.formatRelativeTime(new Date(heartRateZones[2])),\r\n                heartrate_zone4: utilities.formatRelativeTime(new Date(heartRateZones[1])),\r\n                heartrate_zone5: utilities.formatRelativeTime(new Date(heartRateZones[0])),\r\n                totalCalories: log.totalCalories ?? 0,\r\n                power: log.averagePower ?? 0,\r\n                strokeCount: log.lastStroke?.strokeCount ?? 0\r\n            };\r\n            exportData.push(data);\r\n            return utilities.convertArrayOfObjectsToCSV({ data: exportData });\r\n        }\r\n        init() {\r\n            pm3.log.registerCustomExport(this, \"Demo export\", \"demo.xml\", \"application/xml\", this.exportXmlDemo);\r\n            pm3.log.registerCustomExport(this, \"Demo CSV export\", \"demo.csv\", \"text/csv;charset=utf-8\", this.exportCSV);\r\n        }\r\n        remove() {\r\n            pm3.log.deRegisterCustomExport(this.exportXmlDemo);\r\n            pm3.log.deRegisterCustomExport(this.exportCSV);\r\n        }\r\n    }\r\n    var plugin;\r\n    plugin = new ExamplePlugin();\r\n})(tijmenvangulik_examples_export_demo || (tijmenvangulik_examples_export_demo = {}));\r\n","styles":"","typeScript":"module tijmenvangulik_examples_export_demo { //make a name space to prevent mix ups\n\n\n    class ExamplePlugin extends ExternalPlugin {\n        private _oldExport  : any;\n\n        public  exportXmlDemo(exportItem : pm3.WorkoutLogItem) : string {\n            \n            var data= `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <value>${exportItem.timeStampDate.toISOString()}</value>\n</xml>\n`\n            return data;\n        }\n        public exportCSV(log : pm3.WorkoutLogItem) : string {\n            let exportData=[];\n        \n            var heartRateZones=(Array.isArray(log.heartRateZones) && log.heartRateZones.length==5)?log.heartRateZones:[0,0,0,0,0];\n            \n            var data={\n                training: pm3.getTrainingDataCaption(log),\n                timeStamp: log.timeStampDate,\n                duration: utilities.formatRelativeTime(new Date(log.endDuration)),\n                distance: log.endDistance,\n                drag:log.lastStroke.dragFactor,\n                split: utilities.formatRelativeTime( pm3.calcTrainingDataSplitTime(log) ),\n                description: log.description,\n                heartrate_zone1:utilities.formatRelativeTime(new Date(heartRateZones[4])),\n                heartrate_zone2:utilities.formatRelativeTime(new Date(heartRateZones[3])),\n                heartrate_zone3:utilities.formatRelativeTime(new Date(heartRateZones[2])),\n                heartrate_zone4:utilities.formatRelativeTime(new Date(heartRateZones[1])),\n                heartrate_zone5:utilities.formatRelativeTime(new Date(heartRateZones[0])),\n                totalCalories: log.totalCalories??0,\n                power:log.averagePower??0,\n                strokeCount:log.lastStroke?.strokeCount??0            \n            }            \n            exportData.push(data);\n\n            return utilities.convertArrayOfObjectsToCSV({data: exportData});\n\n        }\n        public init() {\n            pm3.log.registerCustomExport(this,\"Demo export\",\"demo.xml\",\"application/xml\",this.exportXmlDemo);  \n            pm3.log.registerCustomExport(this,\"Demo CSV export\",\"demo.csv\",\"text/csv;charset=utf-8\",this.exportCSV);       \n     \n        }\n        public remove() {\n            pm3.log.deRegisterCustomExport(this.exportXmlDemo);\n            pm3.log.deRegisterCustomExport(this.exportCSV);\n        }               \n    }\n\n    var plugin : ExamplePlugin;\n    plugin = new ExamplePlugin();\n    \n}","html":""}