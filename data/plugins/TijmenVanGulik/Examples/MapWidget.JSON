{"id":"tijmenvangulik_examples_Map","name":"Map example","description":"Map based on open layer","version":"1.0","author":"Tijmen van Gulik","url":"https://tijmenvangulik.github.io/Ergometerspace/data/plugins/TijmenVanGulik/Examples/MapWidget.JSON","script":"/**\n * Created by tijmen on 23-12-15.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar tijmenvangulik_examples_MapWidgetExample;\n(function (tijmenvangulik_examples_MapWidgetExample) {\n    var EPG_MAP = 'EPSG:3857';\n    var EPG_KML = 'EPSG:4326';\n    /*------------------------------------------------------------------------------\n     Simple google earth widget example\n     ------------------------------------------------------------------------------*/\n    var MapWidgetExample = (function (_super) {\n        __extends(MapWidgetExample, _super);\n        function MapWidgetExample(controller) {\n            var _this = _super.call(this, controller) || this;\n            _this._track = [];\n            _this._trackIndex = 0;\n            _this._kmlData = null;\n            _this._rowingZoom = 17;\n            _this._trainingDistance = 0;\n            _this._workDistance = 0;\n            _this._updateDelay = 1000 / 20; //20 frames per second\n            _this._animating = false;\n            _this._waitingForTimeout = false;\n            _this._speed = 0;\n            _this._finished = false;\n            _this.caption = \"Map widget example\";\n            _this.editPropertiesVisible = true;\n            _this.defaultHeight = 6;\n            _this._track = [];\n            return _this;\n        }\n        MapWidgetExample.prototype.flyToStart = function (done, duration) {\n            var _this = this;\n            if (duration === void 0) { duration = 2000; }\n            if (this._track && this._track.length > 0) {\n                var trackPoint = this._track[0];\n                var currentZoom = this._map.getView().getZoom();\n                this.flyTo([trackPoint.longitude, trackPoint.latitude, 0], this._rowingZoom, trackPoint.heading, currentZoom - 1, duration, function (complete) {\n                    _this._animatedDistance = 0;\n                    // start it off\n                    _this._trackIndex = 0;\n                    done();\n                    return true;\n                });\n            }\n        };\n        MapWidgetExample.prototype.startAnimation = function () {\n            var _this = this;\n            if (!this._animating) {\n                this._animating = true;\n                var doStart = function () {\n                    _this._animatedDistance = 0;\n                    _this._trackIndex = 0;\n                    _this._map.on('postcompose', _this.tickAnimation.bind(_this));\n                    _this._map.render();\n                };\n                doStart();\n                if (this._animatedDistance == 0)\n                    doStart();\n                else\n                    this.flyToStart(doStart, 0);\n                //               \n            }\n        };\n        MapWidgetExample.prototype.stopAnimation = function () {\n            if (this._animating) {\n                this._animating = false;\n                this._workDistance = 0;\n                this._trainingDistance = 0;\n                this._map.un('postcompose', this.tickAnimation);\n                this.showWholeMap();\n            }\n            this._trackIndex = 0;\n        };\n        MapWidgetExample.prototype.tickAnimation = function (event) {\n            if (this._animating) {\n                var vectorContext = event.vectorContext;\n                var currentTime = new Date().getTime();\n                var timeSinceLastUpdate = 0;\n                if (this._lastUpdateTime) {\n                    timeSinceLastUpdate = currentTime - this._lastUpdateTime;\n                }\n                var extrapolatedDistance = 0;\n                if (this._speed && !this._finished) {\n                    extrapolatedDistance = (this._speed * (timeSinceLastUpdate / 1000));\n                }\n                var totalDistanceCalc = this._workDistance + extrapolatedDistance;\n                //take the next track item when moving past the current\n                var currentTrackItem = this._track[this._trackIndex];\n                while (this._trackIndex < this._track.length - 1 && totalDistanceCalc >= currentTrackItem.cumualtiveDistance + currentTrackItem.distance) {\n                    this._trackIndex++;\n                    currentTrackItem = this._track[this._trackIndex];\n                }\n                var heading = currentTrackItem.heading;\n                //calc the relative positon within the current track line\n                var relativeDistance = totalDistanceCalc - currentTrackItem.cumualtiveDistance;\n                if (relativeDistance < 0)\n                    relativeDistance = 0;\n                //calc the next coordinate\n                var dest = this.calcNextCoordinate(currentTrackItem.latitude, currentTrackItem.longitude, relativeDistance, heading);\n                this._animatedDistance += relativeDistance;\n                var view = this._map.getView();\n                var rower_location = ol.proj.fromLonLat([dest.longitude, dest.latitude, 0]);\n                view.setCenter(rower_location);\n                var rowerPoint = new ol.geom.Point(rower_location);\n                this._rower.setGeometry(rowerPoint);\n                //vectorContext.drawFeature(this._rower, this._styles.rower);\n                //var feature = new ol.Feature(rower_location);\n                //vectorContext.drawFeature(feature, this._styles.rower);\n                console.log({\n                    center: [dest.longitude, dest.latitude, 0],\n                    duration: 10,\n                    rotation: heading\n                });\n                this._map.render();\n            }\n        };\n        /* Helper functions, courtesy of\n         http://www.movable-type.co.uk/scripts/latlong.html */\n        MapWidgetExample.prototype.calcDistance = function (lat1, lng1, lat2, lng2) {\n            var a = Math.sin(lat1 * Math.PI / 180) * Math.sin(lat2 * Math.PI / 180);\n            var b = Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n                Math.cos((lng2 - lng1) * Math.PI / 180);\n            return 6371000 * Math.acos(a + b);\n        };\n        MapWidgetExample.prototype.radians = function (n) {\n            return n * (Math.PI / 180);\n        };\n        MapWidgetExample.prototype.degrees = function (n) {\n            return n * (180 / Math.PI);\n        };\n        MapWidgetExample.prototype.calcHeading = function (startLat, startLong, endLat, endLong) {\n            startLat = this.radians(startLat);\n            startLong = this.radians(startLong);\n            endLat = this.radians(endLat);\n            endLong = this.radians(endLong);\n            var dLong = endLong - startLong;\n            var dPhi = Math.log(Math.tan(endLat / 2.0 + Math.PI / 4.0) / Math.tan(startLat / 2.0 + Math.PI / 4.0));\n            if (Math.abs(dLong) > Math.PI) {\n                if (dLong > 0.0)\n                    dLong = -(2.0 * Math.PI - dLong);\n                else\n                    dLong = (2.0 * Math.PI + dLong);\n            }\n            return (this.degrees(Math.atan2(dLong, dPhi)) + 360.0) % 360.0;\n        };\n        MapWidgetExample.prototype.calcNextCoordinate = function (lat, lng, dist, heading) {\n            lat *= Math.PI / 180;\n            lng *= Math.PI / 180;\n            heading *= Math.PI / 180;\n            dist /= 6371000; // angular dist\n            var lat2 = Math.asin(Math.sin(lat) * Math.cos(dist) +\n                Math.cos(lat) * Math.sin(dist) * Math.cos(heading));\n            return {\n                latitude: 180 / Math.PI * lat2,\n                longitude: 180 / Math.PI *\n                    (lng + Math.atan2(Math.sin(heading) * Math.sin(dist) * Math.cos(lat2), Math.cos(dist) - Math.sin(lat) * Math.sin(lat2)))\n            };\n        };\n        MapWidgetExample.prototype.initControl = function () {\n            var _this = this;\n            _super.prototype.initControl.call(this);\n            //make a canvas element within the div of the Erogmeter widget\n            var mapId = this.name + \"Map2d\";\n            this.$container.append(\" <div id='\" + mapId + \"' class='ExampleMapContainer'></div>\");\n            this._$map = $(\"#\" + mapId);\n            this.loadMapState();\n            this.initMap();\n            var self = this;\n            this._dialogMapSettings = dialog.newStandardDialog({\n                title: 'Map settings',\n                message: $('#dialogMapExampleSettings'),\n                onhide: function () {\n                    _this.updateSettings();\n                }\n            });\n            $('#mapExampleLoadFile').css(\"visibility\", \"hidden\");\n            $('#mapExampleLoadFileButton').click(function (e) {\n                e.preventDefault();\n                $('#mapExampleLoadFile').trigger('click');\n            });\n            $(\"#mapExampleLoadFile\").change(function (evt) {\n                var files = evt.target.files;\n                for (var i = 0; i < files.length; i++) {\n                    var file = files[i];\n                    var reader = new FileReader();\n                    reader.onload = function (e) {\n                        try {\n                            self.loadFromKmlData(e.target.result);\n                        }\n                        catch (err) {\n                            app.showTopError(\"Can not read plugin: \" + err);\n                            throw err;\n                        }\n                    };\n                    reader.readAsText(file);\n                }\n            });\n            $('#MapExampleZoom').slider();\n        };\n        MapWidgetExample.prototype.flyTo = function (locationParm, destZoom, heading, aboveZoom, duration, done) {\n            var location = ol.proj.fromLonLat(locationParm);\n            var view = this._map.getView();\n            var zoom = view.getZoom();\n            if (!aboveZoom)\n                aboveZoom = zoom;\n            if (!destZoom)\n                destZoom = zoom;\n            var parts = 2;\n            var called = false;\n            function callback(complete) {\n                --parts;\n                if (called) {\n                    return;\n                }\n                if (parts === 0 || !complete) {\n                    called = true;\n                    done(complete);\n                }\n            }\n            view.animate({\n                center: location,\n                duration: duration\n            }, callback);\n            view.animate({\n                zoom: aboveZoom,\n                duration: duration / 2\n            }, {\n                zoom: destZoom,\n                duration: duration / 2,\n                rotation: ((heading + 90) / 360) * Math.PI * 2\n            }, callback);\n        };\n        MapWidgetExample.prototype.showWholeMap = function () {\n            this._map.getView().fit(this._trackExtent, this._map.getSize());\n        };\n        MapWidgetExample.prototype.trackLoaded = function () {\n            this.showWholeMap();\n            this._trackIndex = 0;\n            this._animatedDistance = -1;\n            var trackPoint = this._track[this._trackIndex];\n            var rowerPoint = new ol.geom.Point(ol.proj.fromLonLat([trackPoint.longitude, trackPoint.latitude, 0]));\n            this._rower.setGeometry(rowerPoint);\n        };\n        MapWidgetExample.prototype.setLoadTracEvent = function () {\n            var self = this;\n            this._raceLayer.once('change', function (evt) {\n                try {\n                    var src = this.getSource();\n                    if (src.getState() == 'ready') {\n                        var features = src.getFeatures();\n                        if (typeof features === 'undefined' || !features || features.length == 0)\n                            throw 'No features in KML file';\n                        var geometry = features[0].getGeometry();\n                        if (typeof geometry === 'undefined' || !geometry || geometry.length == 0)\n                            throw 'No geometry found in KML file';\n                        var coordinates = geometry.getCoordinates();\n                        if (typeof coordinates === 'undefined' || !coordinates || coordinates.length == 0)\n                            throw 'No coordinates found in KML file';\n                        self._trackExtent = geometry.getExtent();\n                        self._track = [];\n                        var cumualtiveDistance = 0;\n                        for (var i = 0; i < coordinates.length - 2; i++) {\n                            var srcCoor = ol.proj.toLonLat(coordinates[i]);\n                            var nextCoor = ol.proj.toLonLat(coordinates[i + 1]);\n                            var distance = self.calcDistance(srcCoor[1], srcCoor[0], nextCoor[1], nextCoor[0]);\n                            var heading = self.calcHeading(srcCoor[1], srcCoor[0], nextCoor[1], nextCoor[0]);\n                            self._track.push({\n                                longitude: srcCoor[0],\n                                latitude: srcCoor[1],\n                                distance: distance,\n                                cumualtiveDistance: cumualtiveDistance,\n                                heading: heading\n                            });\n                            cumualtiveDistance += distance;\n                        }\n                        if (self._track.length > 0)\n                            self.trackLoaded();\n                    }\n                }\n                catch (e) {\n                    this._kmlData = null;\n                    app.showTopError(e);\n                }\n            });\n        };\n        MapWidgetExample.prototype.initMap = function () {\n            //require([\"https://openlayers.org/en/v3.20.1/build/ol.js\"],\n            //   (ola) => {\n            //     ol=ola;\n            var self = this;\n            var url = 'TheBoatRace.kml';\n            //'http://www.vangulik.org/Ergometer/TheBoatRace.kml'\n            var projection = ol.proj.get(EPG_MAP);\n            var mapLayer = new ol.layer.Tile({ source: new ol.source.OSM() });\n            this._styles = {\n                'rower': new ol.style.Style({\n                    image: new ol.style.Icon({\n                        anchor: [0.5, 0.5],\n                        src: 'images/LogoBW22.png'\n                    })\n                })\n            };\n            this._rower = new ol.Feature({\n                type: 'rower',\n                geometry: new ol.geom.Point(ol.proj.fromLonLat([-0.212708093427223, 51.46670252304421, 0]))\n            });\n            var rowerLayer = new ol.layer.Vector({\n                source: new ol.source.Vector({\n                    features: [this._rower]\n                }),\n                style: function (feature) {\n                    // hide geoMarker if animation is active\n                    return self._styles[feature.get('type')];\n                }\n            });\n            if (this._kmlData) {\n                this._raceLayer = new ol.layer.Vector();\n            }\n            else {\n                this._mapName = 'The boat race';\n                this._raceLayer = new ol.layer.Vector({\n                    source: new ol.source.Vector({\n                        url: url,\n                        format: new ol.format.KML(),\n                    })\n                });\n            }\n            this.setLoadTracEvent();\n            this._map = new ol.Map({\n                layers: [mapLayer, this._raceLayer, rowerLayer],\n                target: this._$map.get(0),\n                view: new ol.View({\n                    center: ol.proj.fromLonLat([-0.212708093427223, 51.46670252304421]),\n                    zoom: 1,\n                    projection: projection\n                }),\n                controls: []\n            });\n            if (this._kmlData) {\n                this.setRaceLayerFromKmlData();\n            }\n            //   });\n        };\n        MapWidgetExample.prototype.resize = function () {\n            _super.prototype.resize.call(this);\n            this._$map.css({ height: (this.$container.innerHeight() - 24).toString() + \"px\" });\n            if (this._map)\n                this._map.updateSize();\n        };\n        MapWidgetExample.prototype.strokeDataUpdate = function (strokeData) {\n            //this._workDistance = strokeData.distance + this._lastWorkTime;\n            this._workDistance = strokeData.distance;\n            this._speed = strokeData.speed;\n            this._lastUpdateTime = new Date().getTime();\n            if (!this._finished && this._speed && this._speed > 0) {\n                if (!this._animating) {\n                    this.startAnimation();\n                }\n            }\n            else\n                this.stopAnimation();\n        };\n        MapWidgetExample.prototype.trainingDataUpdate = function (trainingData) {\n            if (this._trainingDistance != trainingData.distance) {\n                this._trainingDistance = trainingData.distance;\n                //get a new high score for the training distance\n                if (trainingData.distance > 0 && this._workDistance == 0 && !this._animating)\n                    this.flyToStart(function () { });\n            }\n            var finished = (trainingData.endDistance > 0 && trainingData.endDuration > 0);\n            if (finished != this._finished) {\n                this._finished = finished;\n                if (this._finished) {\n                    this.stopAnimation();\n                    //this._lastWorkTime= this._lastWorkTime+ trainingData.endDistance;\n                }\n            }\n        };\n        MapWidgetExample.prototype.earthInitialized = function () {\n        };\n        MapWidgetExample.prototype.loaded = function () {\n            _super.prototype.loaded.call(this);\n            pm3.monitor.pubsubs.subStrokeDataUpdate(this, this.strokeDataUpdate);\n            pm3.monitor.pubsubs.subTrainingDataUpdate(this, this.trainingDataUpdate);\n        };\n        MapWidgetExample.prototype.beforeUnload = function () {\n            _super.prototype.beforeUnload.call(this);\n            pm3.monitor.pubsubs.unsubStrokeDataUpdate(this,this.strokeDataUpdate);\n            pm3.monitor.pubsubs.unsubTrainingDataUpdate(this,this.trainingDataUpdate);\n        };\n        MapWidgetExample.prototype.setRaceLayerFromKmlData = function () {\n            var kml = new ol.format.KML();\n            var src = new ol.source.Vector();\n            var features = kml.readFeatures(this._kmlData, { dataProjection: EPG_KML, featureProjection: EPG_MAP });\n            this._mapName = kml.readName(this._kmlData);\n            src.addFeatures(features);\n            this._raceLayer.setSource(src);\n        };\n        MapWidgetExample.prototype.loadFromKmlData = function (kmlData) {\n            this.setLoadTracEvent();\n            this._kmlData = kmlData;\n            this.setRaceLayerFromKmlData();\n            //var src = this._raceLayer.getSource();\n            //src.clear();\n            //src.addFeatures(features);\n            //this._map.getView().fit(this._raceLayer.getExtent(),this._map.getSize());\n        };\n        MapWidgetExample.prototype.openEditProperties = function () {\n            $('#exampleMapName').text(this._mapName);\n            $('#exampleMapDistance').text(' (' + this.getTrackDistance().toString() + 'm ) ');\n            $('#MapExampleZoom').slider(\"setValue\", this._rowingZoom);\n            $('#MapExampleZoomValue').text(this._rowingZoom.toString());\n            this._dialogMapSettings.open();\n        };\n        MapWidgetExample.prototype.updateSettings = function () {\n            var newZoom = parseInt($('#MapExampleZoom').val());\n            if (newZoom != this._rowingZoom) {\n                this._rowingZoom = newZoom;\n                if (!this._animating)\n                    this.flyToStart(function () { });\n            }\n            this.saveMapState();\n        };\n        MapWidgetExample.prototype.getMapSettings = function () {\n            return { kmlData: this._kmlData,\n                rowingZoom: this._rowingZoom\n            };\n        };\n        MapWidgetExample.prototype.setMapSettings = function (settings) {\n            this._kmlData = settings.kmlData;\n            this._rowingZoom = settings.rowingZoom || 17;\n        };\n        MapWidgetExample.prototype.saveMapState = function () {\n            localStorage.setItem(\"MapExampleWidget_settings\", JSON.stringify(this.getMapSettings()));\n        };\n        MapWidgetExample.prototype.loadMapState = function () {\n            var settingsString = localStorage.getItem(\"MapExampleWidget_settings\");\n            var settings;\n            if (settingsString != \"undefined\" && settingsString != null && settingsString != \"null\") {\n                settings = JSON.parse(settingsString);\n                this.setMapSettings(settings);\n            }\n        };\n        MapWidgetExample.prototype.getTrackDistance = function () {\n            if (this._track && this._track.length > 0)\n                return Math.round(this._track[this._track.length - 1].cumualtiveDistance);\n            else\n                return 0;\n        };\n        return MapWidgetExample;\n    }(ergometerWidgets.ErgometerWidget));\n    /*------------------------------------------------------------------------------\n     Create and remove the widgets in the Plugin\n     ------------------------------------------------------------------------------*/\n    var ExamplePlugin = (function (_super) {\n        __extends(ExamplePlugin, _super);\n        function ExamplePlugin() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        ExamplePlugin.prototype.init = function () {\n            //create the widget(s) on create\n            dashboard.widgetRegistry().register(MapWidgetExample, 'tijmenvangulik_examples_MapWidgetExample', 'Map', ['Examples']);\n        };\n        ExamplePlugin.prototype.remove = function () {\n            //remove the widgets when the plugin is removed\n            dashboard.widgetRegistry().deregister('tijmenvangulik_examples_MapWidgetExample');\n        };\n        return ExamplePlugin;\n    }(ExternalPlugin));\n    var plugin;\n    plugin = new ExamplePlugin();\n})(tijmenvangulik_examples_MapWidgetExample || (tijmenvangulik_examples_MapWidgetExample = {}));\n","styles":".ExampleMapContainer {\n    padding-top: 20px;\n    padding-left: 4px;\n    padding-right: 4px;\n    padding-bottom:12px;\n}","typeScript":"/**\n * Created by tijmen on 23-12-15.\n */\n\nmodule tijmenvangulik_examples_MapWidgetExample { //make a name space to prevent mix ups\n    \n\n    interface MapCoordinate {\n        longitude : number;\n        latitude : number;\n        altitude? : number;\n    }\n    interface TrackPoint {\n        longitude : number;\n        latitude : number;\n        distance : number;\n        cumualtiveDistance  : number;\n        heading : number;\n    }\n    interface MapSettings {\n        kmlData : string;\n        rowingZoom : number;\n    }\n    const EPG_MAP = 'EPSG:3857';\n    const EPG_KML = 'EPSG:4326';\n        \n    /*------------------------------------------------------------------------------\n     Simple google earth widget example\n     ------------------------------------------------------------------------------*/\n\n    class MapWidgetExample  extends ergometerWidgets.ErgometerWidget {\n        private _trainingDistance : number;\n        private _workDistance : number;\n        private _updateDelay : number;\n        private _animating : boolean;\n        private _waitingForTimeout : boolean;\n        private _speed : number;\n        private _lastUpdateTime : number;\n        private _animatedDistance : number;\n        private _finished;\n        private _$map : JQuery;\n        private _track : TrackPoint[]=[];\n        private _trackIndex : number = 0;\n        //private _lastWorkTime =0; //used for debugging and going longer than 100 meters\n\n        private _map : ol.Map;\n        private _raceLayer : ol.layer.Vector;\n        private _trackExtent : number[];\n        private _rower : ol.Feature;\n        private _styles;\n        private _kmlData : string = null;\n        private _mapName : string;\n        private _rowingZoom = 17;\n        private _dialogMapSettings : BootstrapDialog;\n\n        public flyToStart(done : ()=>void, duration =2000 ) {\n            if ( this._track && this._track.length>0) {\n                var trackPoint=this._track[0];\n                var currentZoom = this._map.getView().getZoom();\n                this.flyTo([trackPoint.longitude,trackPoint.latitude,0 ],this._rowingZoom,\n                      trackPoint.heading,currentZoom-1,duration,(complete : boolean)=>{\n                        this._animatedDistance=0;\n                        // start it off\n                        this._trackIndex=0;\n                        done(); \n                        return true;                        \n                      } );\n\n            }\n        }\n        public startAnimation() {\n            if (!this._animating) {\n                this._animating=true;\n                var doStart= ()=> {\n                    this._animatedDistance=0;\n                    this._trackIndex=0;\n                    this._map.on('postcompose', this.tickAnimation.bind(this));\n                    this._map.render();\n         \n                }\n                doStart();\n                \n                if (this._animatedDistance==0) \n                   doStart();\n                 else this.flyToStart( doStart,0); \n                \n                \n                //               \n            }\n\n             \n        }\n\n        public stopAnimation() {\n            if (this._animating) {\n                this._animating=false;\n                this._workDistance=0;\n                this._trainingDistance=0;\n                this._map.un('postcompose', this.tickAnimation);\n                this.showWholeMap();\n            }\n            this._trackIndex=0;\n        }\n\n        public tickAnimation(event) {\n            \n            if (this._animating) {\n                var vectorContext = event.vectorContext;\n                \n                var currentTime = new Date().getTime();\n                var timeSinceLastUpdate : number =0;\n                if (this._lastUpdateTime){\n                    timeSinceLastUpdate = currentTime- this._lastUpdateTime;\n                }\n                var extrapolatedDistance=0;\n                if (this._speed && !this._finished) {\n                    extrapolatedDistance= (this._speed* (timeSinceLastUpdate/1000));\n                }\n                var totalDistanceCalc=this._workDistance+extrapolatedDistance;\n                //take the next track item when moving past the current\n                var currentTrackItem=this._track[this._trackIndex];\n                while (this._trackIndex<this._track.length-1 && totalDistanceCalc>= currentTrackItem.cumualtiveDistance+ currentTrackItem.distance) {\n                    this._trackIndex++;\n                    currentTrackItem=this._track[this._trackIndex];\n                }\n                var heading=currentTrackItem.heading;\n                //calc the relative positon within the current track line\n                var relativeDistance= totalDistanceCalc - currentTrackItem.cumualtiveDistance;\n                if (relativeDistance<0) //do not go backwards\n                    relativeDistance=0;\n                //calc the next coordinate\n                var dest = this.calcNextCoordinate(currentTrackItem.latitude, currentTrackItem.longitude, relativeDistance,\n                    heading);\n    \n                this._animatedDistance += relativeDistance;\n    \n                var view= this._map.getView();\n                var rower_location=ol.proj.fromLonLat([dest.longitude,dest.latitude,0 ]);\n                \n                view.setCenter(rower_location);\n                var rowerPoint= new ol.geom.Point(rower_location);\n                this._rower.setGeometry(rowerPoint);\n                //vectorContext.drawFeature(this._rower, this._styles.rower);\n                //var feature = new ol.Feature(rower_location);\n                //vectorContext.drawFeature(feature, this._styles.rower);\n                \n                console.log({\n                  center:[dest.longitude,dest.latitude,0 ],\n                  duration: 10,\n                  rotation: heading\n                });\n                this._map.render();\n            }\n            \n        }\n\n        /* Helper functions, courtesy of\n         http://www.movable-type.co.uk/scripts/latlong.html */\n        public calcDistance(lat1 : number, lng1 : number, lat2 : number, lng2 : number) {\n            var a = Math.sin(lat1 * Math.PI / 180) * Math.sin(lat2 * Math.PI / 180);\n            var b = Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n                Math.cos((lng2 - lng1) * Math.PI / 180);\n            return 6371000 * Math.acos(a + b);\n        }\n\n        public radians(n) {\n            return n * (Math.PI / 180);\n        }\n        public degrees(n) {\n            return n * (180 / Math.PI);\n        }\n\n        public calcHeading(startLat,startLong,endLat,endLong){\n            startLat = this.radians(startLat);\n            startLong = this.radians(startLong);\n            endLat = this.radians(endLat);\n            endLong = this.radians(endLong);\n\n            var dLong = endLong - startLong;\n\n            var dPhi = Math.log(Math.tan(endLat/2.0+Math.PI/4.0)/Math.tan(startLat/2.0+Math.PI/4.0));\n            if (Math.abs(dLong) > Math.PI){\n                if (dLong > 0.0)\n                    dLong = -(2.0 * Math.PI - dLong);\n                else\n                    dLong = (2.0 * Math.PI + dLong);\n            }\n\n            return (this.degrees(Math.atan2(dLong, dPhi)) + 360.0) % 360.0;\n        }\n\n        public calcNextCoordinate(lat : number, lng : number, dist : number, heading : number) : MapCoordinate {\n            lat *= Math.PI / 180;\n            lng *= Math.PI / 180;\n            heading *= Math.PI / 180;\n            dist /= 6371000; // angular dist\n\n            var lat2 = Math.asin(Math.sin(lat) * Math.cos(dist) +\n                Math.cos(lat) * Math.sin(dist) * Math.cos(heading));\n\n            return {\n                latitude: 180 / Math.PI * lat2,\n                longitude: 180 / Math.PI *\n                (lng + Math.atan2(Math.sin(heading) * Math.sin(dist) * Math.cos(lat2),\n                    Math.cos(dist) - Math.sin(lat) * Math.sin(lat2)))};\n        }\n\n        public initControl() {\n            super.initControl();\n            //make a canvas element within the div of the Erogmeter widget\n            var mapId =this.name+\"Map2d\";\n            this.$container.append(\n                \" <div id='\"+mapId+\"' class='ExampleMapContainer'></div>\");\n            this._$map= $(\"#\"+mapId);\n            this.loadMapState();\n            \n            this.initMap();\n            var self=this;\n            \n            this._dialogMapSettings=dialog.newStandardDialog({\n              title: 'Map settings',\n              message: $('#dialogMapExampleSettings'),\n              onhide: ()=>{\n                this.updateSettings();\n              }\n            });\n\t\t    $('#mapExampleLoadFile').css(\"visibility\", \"hidden\");\n            $('#mapExampleLoadFileButton').click(function(e) {\n                e.preventDefault();\n                $('#mapExampleLoadFile').trigger('click');\n            });\n            $(\"#mapExampleLoadFile\").change(function(evt) {\n            \n                var files = (<any>evt.target).files;\n                for(var i=0;i<files.length;i++){\n                    var file=files[i];\n                    var reader = new FileReader();\n            \n                    reader.onload = function(e) {\n            \n                        try {\n                            self.loadFromKmlData( (<any>e.target).result);\n            \n                        }\n                        catch (err) {\n                            app.showTopError(\"Can not read plugin: \"+err);\n                            throw err;\n                        }\n            \n                       \n            \n            \n                    };\n            \n                    reader.readAsText(file);\n                }\n            \n            });\n            \n            $('#MapExampleZoom').slider();\n            \n        }\n                           \n        public flyTo(locationParm :number[],destZoom: number,heading: number,aboveZoom: number,duration : number,\n                    done : (complete : boolean)=>{}) {\n            var location = ol.proj.fromLonLat(locationParm);\n            \n            var view=this._map.getView();\n            var zoom = view.getZoom();\n            if (!aboveZoom) aboveZoom=zoom;\n            if (!destZoom) destZoom=zoom;\n            \n            var parts = 2;\n            var called = false;\n            function callback(complete) {\n              --parts;\n              if (called) {\n                return;\n              }\n              if (parts === 0 || !complete) {\n                called = true;\n                done(complete);\n              }\n            }\n            view.animate({\n              center: location,\n              duration: duration\n            }, callback);\n            view.animate({\n              zoom: aboveZoom,\n              duration: duration / 2\n            }, {\n              zoom: destZoom,\n              duration: duration / 2,\n              rotation: ((heading+90)/360)*Math.PI * 2\n            }, callback);\n        }\n        public showWholeMap() {\n             this._map.getView().fit(this._trackExtent,this._map.getSize()); \n        }\n        public trackLoaded() {\n            this.showWholeMap();\n            this._trackIndex=0;\n            this._animatedDistance=-1;\n            var trackPoint=this._track[this._trackIndex];\n            var rowerPoint= new ol.geom.Point(ol.proj.fromLonLat([trackPoint.longitude,trackPoint.latitude,0]));\n            this._rower.setGeometry(rowerPoint);\n            \n\n        }\n        public setLoadTracEvent() {\n          var self=this;\n          this._raceLayer.once('change', function(evt) {\n              try {\n                  var src=this.getSource();\n                  if (src.getState() == 'ready') {\n                    \n                    var features=src.getFeatures();\n                    if (typeof features === 'undefined' || !features || features.length==0) \n                       throw 'No features in KML file';\n                    var geometry=features[0].getGeometry();\n                    if (typeof geometry === 'undefined' || !geometry || geometry.length==0)\n                      throw 'No geometry found in KML file';\n                    var coordinates=geometry.getCoordinates();\n                    if (typeof coordinates === 'undefined' || !coordinates || coordinates.length==0)\n                      throw 'No coordinates found in KML file';\n                    self._trackExtent=geometry.getExtent();\n                    self._track=[];\n                    var cumualtiveDistance=0;\n                    for (var i=0;i<coordinates.length-2;i++ ) {\n        \n                        var srcCoor =ol.proj.toLonLat(coordinates[i]);\n                        var nextCoor =ol.proj.toLonLat(coordinates[i+1]);\n        \n                        var distance= self.calcDistance(srcCoor[1],srcCoor[0],nextCoor[1],nextCoor[0]);\n        \n                        var heading=self.calcHeading(srcCoor[1],srcCoor[0],nextCoor[1],nextCoor[0]);\n        \n                        self._track.push({\n                            longitude : srcCoor[0],\n                            latitude : srcCoor[1],\n                            distance : distance,\n                            cumualtiveDistance: cumualtiveDistance,\n                            heading: heading\n                        });\n                        cumualtiveDistance += distance; \n                    }\n                    if (self._track.length>0)\n                       self.trackLoaded();\n                  }\n               }\n               catch (e) {\n                   this._kmlData=null;\n                   app.showTopError(e);\n               }\n            });            \n        }\n        public initMap() {\n            \n                    \n           //require([\"https://openlayers.org/en/v3.20.1/build/ol.js\"],\n             //   (ola) => {\n\n               //     ol=ola;\n                    var self = this;\n                    var url='TheBoatRace.kml';\n                    //'http://www.vangulik.org/Ergometer/TheBoatRace.kml'\n                    var projection = ol.proj.get(EPG_MAP);\n                    var mapLayer = new ol.layer.Tile({source: new ol.source.OSM()});\n                    this._styles = {\n                        'rower': new ol.style.Style({\n                          image: new ol.style.Icon({\n                            anchor: [0.5, 0.5],\n                            src: 'images/LogoBW22.png'\n                          })\n                        })}\n                    this._rower = new ol.Feature({\n                        type: 'rower',\n                        geometry: new ol.geom.Point(ol.proj.fromLonLat([-0.212708093427223,51.46670252304421,0]))\n                      });\n                    var rowerLayer = new ol.layer.Vector({\n                        source: new ol.source.Vector({\n                          features: [this._rower]\n                    \n                        }),\n                        style: function(feature) {\n                          // hide geoMarker if animation is active\n                          return self._styles[feature.get('type')];\n                        }\n                      });\n                     \n                    if (this._kmlData) {\n                        this._raceLayer = new ol.layer.Vector();\n                    }\n                    else {\n                      this._mapName='The boat race';\n                      this._raceLayer = new ol.layer.Vector({\n                        source: new ol.source.Vector({\n                          url: url,\n                          format: new ol.format.KML(),\n                    \n                        })\n                      });\n                      \n                    }\n                    this.setLoadTracEvent();\n                    \n                    this._map = new ol.Map({\n                           layers: [mapLayer,this._raceLayer,rowerLayer],\n                            target: this._$map.get(0),\n                            view: new ol.View({\n                              center: ol.proj.fromLonLat([-0.212708093427223,51.46670252304421]),\n                              zoom: 1,\n                              projection: projection\n                              \n                            }),\n                            controls: []\n                        });\n                    if (this._kmlData) {\n       \n                        \n                        this.setRaceLayerFromKmlData();\n\n                        \n                    }\n             //   });\n                    \n\n            \n        }\n\n        public resize() {\n            super.resize();\n\n            this._$map.css({height:(this.$container.innerHeight()-24).toString()+\"px\"});\n            if (this._map) this._map.updateSize();\n\n        }\n\n        public strokeDataUpdate(strokeData : pm3.StrokeData) {\n            //this._workDistance = strokeData.distance + this._lastWorkTime;\n            this._workDistance = strokeData.distance;\n            this._speed=strokeData.speed;\n            this._lastUpdateTime = new Date().getTime();\n            if (!this._finished && this._speed && this._speed>0) {\n                if (!this._animating) {\n                    this.startAnimation();\n                }\n            }\n            else this.stopAnimation();\n\n        }\n\n        public trainingDataUpdate(trainingData : pm3.TrainingData) {\n\n            if (this._trainingDistance!=trainingData.distance) {\n                this._trainingDistance=trainingData.distance;\n                //get a new high score for the training distance\n                if (trainingData.distance >0 && this._workDistance==0 && !this._animating)\n                    this.flyToStart( ()=>{});\n\n            }\n            var finished=(trainingData.endDistance>0 && trainingData.endDuration>0);\n            if (finished!=this._finished) {\n                this._finished=finished;\n                if (this._finished) {\n                    this.stopAnimation();\n                    //this._lastWorkTime= this._lastWorkTime+ trainingData.endDistance;\n                }\n            }\n\n        }\n        public earthInitialized() {\n            \n        }\n        public loaded() {\n          super.loaded();\n          pm3.monitor.pubsubs.subStrokeDataUpdate(this, this.strokeDataUpdate);\n          pm3.monitor.pubsubs.subTrainingDataUpdate(this, this.trainingDataUpdate);\n        }\n        public beforeUnload() {\n          super.beforeUnload();\n          pm3.monitor.pubsubs.unsubStrokeDataUpdate(this,this.strokeDataUpdate);\n          pm3.monitor.pubsubs.unsubTrainingDataUpdate(this,this.trainingDataUpdate);\n        }\n\n        constructor (controller : dashboard.Controller) {\n            super(controller);\n            this._trainingDistance=0;\n            this._workDistance=0;\n            this._updateDelay = 1000/20; //20 frames per second\n            this._animating =false;\n            this._waitingForTimeout =false;\n            this._speed=0;\n            this._finished=false;\n            this.caption = \"Map widget example\";\n            this.editPropertiesVisible = true;\n            this.defaultHeight=6;\n            this._track=[];\n        }\n        \n        private setRaceLayerFromKmlData() {\n            var kml = new ol.format.KML();\n            var src=new ol.source.Vector();\n            var features=kml.readFeatures(this._kmlData,{dataProjection:EPG_KML,featureProjection:EPG_MAP  });\n            \n            this._mapName=kml.readName(this._kmlData);\n \n            src.addFeatures(features);\n            this._raceLayer.setSource(src);\n        }\n            \n        public loadFromKmlData(kmlData : string) {\n            \n            this.setLoadTracEvent();\n            this._kmlData=kmlData;\n            this.setRaceLayerFromKmlData(); \n            \n            \n            //var src = this._raceLayer.getSource();\n            //src.clear();\n            //src.addFeatures(features);\n   \n            //this._map.getView().fit(this._raceLayer.getExtent(),this._map.getSize());\n            \n        }\n        public openEditProperties() {\n            $('#exampleMapName').text(this._mapName);\n            $('#exampleMapDistance').text(' ('+this.getTrackDistance().toString()+'m ) ');\n            $('#MapExampleZoom').slider(\"setValue\",this._rowingZoom);\n            $('#MapExampleZoomValue').text(this._rowingZoom.toString());\n\n            this._dialogMapSettings.open();\n        }\n        protected updateSettings() {\n          let newZoom = parseInt( $('#MapExampleZoom').val());\n          if (newZoom!=this._rowingZoom) {\n            this._rowingZoom=newZoom;\n            if (!this._animating) this.flyToStart( ()=>{});\n          }\n          this.saveMapState();\n        }\n    \n        protected getMapSettings() : MapSettings {\n            return {kmlData: this._kmlData,\n                    rowingZoom: this._rowingZoom\n            }    \n        }\n        protected setMapSettings(settings : MapSettings) {\n            this._kmlData = settings.kmlData;\n            this._rowingZoom = settings.rowingZoom || 17;\n        }\n        \n        protected saveMapState() {\n            localStorage.setItem(\"MapExampleWidget_settings\",JSON.stringify(this.getMapSettings() ));\n        }\n        protected loadMapState() {\n            var settingsString=localStorage.getItem(\"MapExampleWidget_settings\");\n            var settings : MapSettings;\n            if  (settingsString!=\"undefined\" && settingsString!=null && settingsString!=\"null\"  ) {\n                settings=<MapSettings> JSON.parse(settingsString);\n                this.setMapSettings(settings);\n            }\n        }\n        protected getTrackDistance() : number {\n            if ( this._track && this._track.length>0)\n               return Math.round(this._track[this._track.length-1].cumualtiveDistance);\n            else return 0;\n        }\n\n\n    }\n    /*------------------------------------------------------------------------------\n     Create and remove the widgets in the Plugin\n     ------------------------------------------------------------------------------*/\n    class ExamplePlugin extends ExternalPlugin {\n\n        public mapsWidget : MapWidgetExample;\n\n\n        public init() {\n            //create the widget(s) on create\n            dashboard.widgetRegistry().register(MapWidgetExample,'tijmenvangulik_examples_MapWidgetExample','Map',['Examples']);\n        }\n        public remove() {\n            //remove the widgets when the plugin is removed\n            dashboard.widgetRegistry().deregister('tijmenvangulik_examples_MapWidgetExample');\n        }\n    }\n\n    var plugin : ExamplePlugin;\n    plugin = new ExamplePlugin();\n\n}\n","html":"<div style=\"display:none;height=0\">\r<div id=\"dialogMapExampleSettings\" title=\"Example map settings\" >\r        <div class=\"control-group\">\r           <label class=\"control-label\" >Route</label>\r            <div class=\"controls\" for=\"mapExampleLoadFileButton\">\r               <span id=\"exampleMapName\" ></span>\r               <span id=\"exampleMapDistance\" ></span>\r               <button id=\"mapExampleLoadFileButton\" class=\"btn btn-default\" >Load from KML file</button><input type=\"file\" id=\"mapExampleLoadFile\" >\r            <p class=\"help-block\" >Kml files contain a route can be created using google maps or google earth</p>\r            </div>\r        </div>\r    <div class=\"control-group\">\r        <label class=\"control-label\" for=\"MapExampleZoom\">Rowing zoom</label>\r    \r        <div class=\"controls\" >\r            <div id=\"MapExampleZoomValue\" ></div>\r            <div id=\"MapExampleZoom\" data-slider-min=\"0\"\r               data-slider-max=\"20\"\r               data-slider-step=\"1\"\r               data-slider-value=\"10\"\r               data-slider-tooltip=\"hide\"  > </div>\r        </div>\r    \r    </div>\r\r</div>\r</div>"}