{"id":"tijmenvangulik_examples_GoogleEarth","name":"Google earth example","description":"The google earth api is now shut down by google and does not work any more","version":"1.2","author":"Tijmen van Gulik","url":"plugins/TijmenVanGulik/Examples/GoogleEarthWidget.json","script":"var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\n/**\r\n * Created by tijmen on 23-12-15.\r\n */\r\nvar tijmenvangulik_examples_GoogleEarthWidgetExample;\r\n(function (tijmenvangulik_examples_GoogleEarthWidgetExample) {\r\n    /*------------------------------------------------------------------------------\r\n     Simple google earth widget example\r\n     ------------------------------------------------------------------------------*/\r\n    var GoogleEarthWidgetExample = (function (_super) {\r\n        __extends(GoogleEarthWidgetExample, _super);\r\n        function GoogleEarthWidgetExample(controller) {\r\n            _super.call(this, controller);\r\n            this.ANIM_ALTITUDE = 1;\r\n            this.JSAPI_KEY = 'ABQIAAAAwbkbZLyhsmTCWXbTcjbgbRSzHs7K5SvaUdm8ua-Xxy_-2dYwMxQMhnagaawTo7L1FE1-amhuQxIlXw';\r\n            this._trackIndex = 0;\r\n            this._trainingDistance = 0;\r\n            this._workDistance = 0;\r\n            this._updateDelay = 1000 / 20; //20 frames per second\r\n            this._animating = false;\r\n            this._waitingForTimeout = false;\r\n            this._speed = 0;\r\n            this._finished = false;\r\n            this.caption = \"Google earth widget example\";\r\n            this.defaultWidth = 2;\r\n            this.defaultHeight = 6;\r\n        }\r\n        GoogleEarthWidgetExample.prototype.earthInitCallback = function (instance) {\r\n            var _this = this;\r\n            this._ge = instance;\r\n            if (this.isLoaded) {\r\n                this._ge.getWindow().setVisibility(true);\r\n            }\r\n            this._geex = new GEarthExtensions(this._ge);\r\n            // add some layers\r\n            this._ge.getLayerRoot().enableLayerById(this._ge.LAYER_BORDERS, true);\r\n            this._ge.getLayerRoot().enableLayerById(this._ge.LAYER_ROADS, true);\r\n            this._ge.getLayerRoot().enableLayerById(this._ge.LAYER_BUILDINGS, true);\r\n            this._ge.getLayerRoot().enableLayerById(this._ge.LAYER_TERRAIN, false);\r\n            this._ge.getLayerRoot().enableLayerById(this._ge.LAYER_TREES, true);\r\n            //this._ge.getOptions().setMouseNavigationEnabled(false);\r\n            this._camera = this._ge.createCamera('');\r\n            google.earth.fetchKml(this._ge, \"http://www.vangulik.org/Ergometer/TheBoatRace.kml\", function (kmlObject) {\r\n                // this.pathLoaded();\r\n                _this.finishFetchKml(kmlObject);\r\n            });\r\n            this._ge.getView().setAbstractView(this._camera);\r\n        };\r\n        GoogleEarthWidgetExample.prototype.earthFailureCallback = function (errorCode) {\r\n            app.showError(\"google earth error:\" + errorCode);\r\n        };\r\n        GoogleEarthWidgetExample.prototype.trackLoaded = function () {\r\n            this._trackIndex = 0;\r\n            // Placemark\r\n            var placemark = this._ge.createPlacemark('');\r\n            placemark.setName('model');\r\n            // Placemark/Model (geometry)\r\n            this._rowerModel = this._ge.createModel('');\r\n            placemark.setGeometry(this._rowerModel);\r\n            // Placemark/Model/Link\r\n            var link = this._ge.createLink('');\r\n            link.setHref('http://www.vangulik.org/Ergometer/RowerChip.dae');\r\n            this._rowerModel.setLink(link);\r\n            // Placemark/Model/Location\r\n            var loc = this._ge.createLocation('');\r\n            loc.setLatitude(this._track[0].latitude);\r\n            loc.setLongitude(this._track[0].longitude);\r\n            this._rowerModel.setLocation(loc);\r\n            var ori = this._ge.createOrientation('or');\r\n            ori.set(this._track[0].heading, 0, 0);\r\n            this._rowerModel.setOrientation(ori);\r\n            // add the model placemark to Earth\r\n            this._ge.getFeatures().appendChild(placemark);\r\n        };\r\n        GoogleEarthWidgetExample.prototype.finishFetchKml = function (kmlObject) {\r\n            // check if the KML was fetched properly\r\n            if (kmlObject) {\r\n                // add the fetched KML to Earth\r\n                this._ge.getFeatures().appendChild(kmlObject);\r\n                var self = this;\r\n                self._track = [];\r\n                this._geex.dom.walk({\r\n                    rootObject: this._ge,\r\n                    visitCallback: function (context) {\r\n                        // alert(this.getType() );\r\n                        if (this.getType() == 'KmlPlacemark') {\r\n                            //alert(this.getName());\r\n                            self._placemark = this;\r\n                            var geo = this.getGeometry();\r\n                            if (geo.getType() == \"KmlLineString\" || geo.getType() == \"KmlLinearRing \") {\r\n                                var coordinates = geo.getCoordinates();\r\n                                var cumualtiveDistance = 0;\r\n                                for (var i = 0; i < coordinates.getLength() - 1; i++) {\r\n                                    var srcCoor = coordinates.get(i);\r\n                                    var nextCoor = coordinates.get(i + 1);\r\n                                    var distance = self.calcDistance(srcCoor.getLatitude(), srcCoor.getLongitude(), nextCoor.getLatitude(), nextCoor.getLongitude());\r\n                                    var heading = self.calcHeading(srcCoor.getLatitude(), srcCoor.getLongitude(), nextCoor.getLatitude(), nextCoor.getLongitude());\r\n                                    self._track.push({\r\n                                        longitude: srcCoor.getLongitude(),\r\n                                        latitude: srcCoor.getLatitude(),\r\n                                        distance: distance,\r\n                                        cumualtiveDistance: cumualtiveDistance,\r\n                                        heading: heading\r\n                                    });\r\n                                    cumualtiveDistance += distance;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                //this._geex.util.takeOverCamera();\r\n                this._geex.util.flyToObject(kmlObject);\r\n                if (self._track.length > 0)\r\n                    self.trackLoaded();\r\n            }\r\n            else {\r\n                // wrap alerts in API callbacks and event handlers\r\n                // in a setTimeout to prevent deadlock in some browsers\r\n                app.showError(\"Can not load coarse: Bad kml file\");\r\n            }\r\n        };\r\n        GoogleEarthWidgetExample.prototype.startAnimation = function () {\r\n            var _this = this;\r\n            if (!this._animating && this._track && this._track.length > 0) {\r\n                this._placemark.setVisibility(false);\r\n                var options = this._ge.getOptions();\r\n                options.setTerrainExaggeration(1);\r\n                //options.setOverviewMapVisibility(true);\r\n                options.setFlyToSpeed(this._ge.SPEED_TELEPORT);\r\n                google.earth.addEventListener(this._ge, 'frameend', function () { _this.tickAnimation(); });\r\n                this._animatedDistance = 0;\r\n                // start it off\r\n                this._animating = true;\r\n                this._trackIndex = 0;\r\n                this.tickAnimation();\r\n            }\r\n        };\r\n        GoogleEarthWidgetExample.prototype.stopAnimation = function () {\r\n            var _this = this;\r\n            if (this._animating) {\r\n                this._ge.getOptions().setFlyToSpeed(3);\r\n                google.earth.removeEventListener(this._ge, 'frameend', function () { _this.tickAnimation(); });\r\n                this._animating = false;\r\n            }\r\n        };\r\n        GoogleEarthWidgetExample.prototype.tickAnimation = function () {\r\n            var currentTime = new Date().getTime();\r\n            var timeSinceLastUpdate = 0;\r\n            if (this._lastUpdateTime) {\r\n                timeSinceLastUpdate = currentTime - this._lastUpdateTime;\r\n            }\r\n            var extrapolatedDistance = 0;\r\n            if (this._speed && !this._finished) {\r\n                extrapolatedDistance = (this._speed * (timeSinceLastUpdate / 1000));\r\n            }\r\n            var totalDistanceCalc = this._workDistance + extrapolatedDistance;\r\n            //take the next track item when moving past the current\r\n            var currentTrackItem = this._track[this._trackIndex];\r\n            while (this._trackIndex < this._track.length - 1 && totalDistanceCalc >= currentTrackItem.cumualtiveDistance + currentTrackItem.distance) {\r\n                this._trackIndex++;\r\n                currentTrackItem = this._track[this._trackIndex];\r\n            }\r\n            var heading = currentTrackItem.heading;\r\n            //calc the relative positon within the current track line\r\n            var relativeDistance = totalDistanceCalc - currentTrackItem.cumualtiveDistance;\r\n            if (relativeDistance < 0)\r\n                relativeDistance = 0;\r\n            //calc the next coordinate\r\n            var dest = this.calcNextCoordinate(currentTrackItem.latitude, currentTrackItem.longitude, relativeDistance, heading);\r\n            this._animatedDistance += relativeDistance;\r\n            var loc = this._rowerModel.getLocation();\r\n            loc.setLatLngAlt(dest.latitude, dest.longitude, 0);\r\n            var ori = this._rowerModel.getOrientation();\r\n            ori.set(heading, 0, 0);\r\n            var cameraLoc = this.calcNextCoordinate(dest.latitude, dest.longitude, -20, heading);\r\n            this._camera.set(cameraLoc.latitude, cameraLoc.longitude, 5, this._ge.ALTITUDE_RELATIVE_TO_GROUND, heading, 80, 0);\r\n            this._ge.getView().setAbstractView(this._camera);\r\n        };\r\n        /* Helper functions, courtesy of\r\n         http://www.movable-type.co.uk/scripts/latlong.html */\r\n        GoogleEarthWidgetExample.prototype.calcDistance = function (lat1, lng1, lat2, lng2) {\r\n            var a = Math.sin(lat1 * Math.PI / 180) * Math.sin(lat2 * Math.PI / 180);\r\n            var b = Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n                Math.cos((lng2 - lng1) * Math.PI / 180);\r\n            return 6371000 * Math.acos(a + b);\r\n        };\r\n        GoogleEarthWidgetExample.prototype.radians = function (n) {\r\n            return n * (Math.PI / 180);\r\n        };\r\n        GoogleEarthWidgetExample.prototype.degrees = function (n) {\r\n            return n * (180 / Math.PI);\r\n        };\r\n        GoogleEarthWidgetExample.prototype.calcHeading = function (startLat, startLong, endLat, endLong) {\r\n            startLat = this.radians(startLat);\r\n            startLong = this.radians(startLong);\r\n            endLat = this.radians(endLat);\r\n            endLong = this.radians(endLong);\r\n            var dLong = endLong - startLong;\r\n            var dPhi = Math.log(Math.tan(endLat / 2.0 + Math.PI / 4.0) / Math.tan(startLat / 2.0 + Math.PI / 4.0));\r\n            if (Math.abs(dLong) > Math.PI) {\r\n                if (dLong > 0.0)\r\n                    dLong = -(2.0 * Math.PI - dLong);\r\n                else\r\n                    dLong = (2.0 * Math.PI + dLong);\r\n            }\r\n            return (this.degrees(Math.atan2(dLong, dPhi)) + 360.0) % 360.0;\r\n        };\r\n        GoogleEarthWidgetExample.prototype.calcNextCoordinate = function (lat, lng, dist, heading) {\r\n            lat *= Math.PI / 180;\r\n            lng *= Math.PI / 180;\r\n            heading *= Math.PI / 180;\r\n            dist /= 6371000; // angular dist\r\n            var lat2 = Math.asin(Math.sin(lat) * Math.cos(dist) +\r\n                Math.cos(lat) * Math.sin(dist) * Math.cos(heading));\r\n            return {\r\n                latitude: 180 / Math.PI * lat2,\r\n                longitude: 180 / Math.PI *\r\n                    (lng + Math.atan2(Math.sin(heading) * Math.sin(dist) * Math.cos(lat2), Math.cos(dist) - Math.sin(lat) * Math.sin(lat2))) };\r\n        };\r\n        GoogleEarthWidgetExample.prototype.loadEarth = function () {\r\n            var _this = this;\r\n            google.load(\"earth\", \"1\", {\r\n                callback: function () {\r\n                    _this.earthLoaded();\r\n                }\r\n            });\r\n        };\r\n        GoogleEarthWidgetExample.prototype.earthLoaded = function () {\r\n            var _this = this;\r\n            google.earth.createInstance(this.name + \"Map3d\", function (instance) {\r\n                _this.earthInitCallback(instance);\r\n            }, function (errorCode) {\r\n                _this.earthFailureCallback(errorCode);\r\n            });\r\n        };\r\n        GoogleEarthWidgetExample.prototype.initControl = function () {\r\n            var _this = this;\r\n            _super.prototype.initControl.call(this);\r\n            //make a canvas element within the div of the Erogmeter widget\r\n            var mapId = this.name + \"Map3d\";\r\n            this.$container.append(\" <div id='\" + mapId + \"' class='googleEarthContainer'></div>\");\r\n            this._$map = $(\"#\" + mapId);\r\n            //            if (google) {\r\n            //             google.earth.createInstance('map3d', this.earthInitCallback, this.earthFailureCallback);\r\n            //            }\r\n            //          google.load(\"earth\", \"1\");\r\n            if ((typeof google != 'undefined') && google) {\r\n                this.earthLoaded();\r\n            }\r\n            else {\r\n                window._jsapiLoadCallback = function () {\r\n                    _this.loadEarth();\r\n                };\r\n                this._scriptNode = document.createElement('script');\r\n                this._scriptNode.src = 'http://www.google.com/jsapi?key=' + this.JSAPI_KEY + '&callback=_jsapiLoadCallback';\r\n                document.body.appendChild(this._scriptNode);\r\n            }\r\n        };\r\n        GoogleEarthWidgetExample.prototype.resize = function () {\r\n            _super.prototype.resize.call(this);\r\n            this._$map.css({ height: (this.$container.innerHeight() - 24).toString() + \"px\" });\r\n            this.paint();\r\n        };\r\n        GoogleEarthWidgetExample.prototype.strokeDataUpdate = function (strokeData) {\r\n            //this._workDistance = strokeData.distance + this._lastWorkTime;\r\n            this._workDistance = strokeData.distance;\r\n            this._speed = strokeData.speed;\r\n            this._lastUpdateTime = new Date().getTime();\r\n            if (!this._finished && this._speed && this._speed > 0) {\r\n                if (!this._animating) {\r\n                    this.startAnimation();\r\n                }\r\n            }\r\n            else\r\n                this.stopAnimation();\r\n        };\r\n        GoogleEarthWidgetExample.prototype.trainingDataUpdate = function (trainingData) {\r\n            if (this._trainingDistance != trainingData.distance) {\r\n                this._trainingDistance = trainingData.distance;\r\n                //get a new high score for the training distance\r\n                if (trainingData.distance > 0 && this._workDistance == 0 && this._rowerModel)\r\n                    this._geex.util.flyToObject(this._rowerModel);\r\n            }\r\n            var finished = (trainingData.endDistance > 0 && trainingData.endDuration > 0);\r\n            if (finished != this._finished) {\r\n                this._finished = finished;\r\n                if (this._finished) {\r\n                    this._speed = 0;\r\n                    this._animating = false;\r\n                }\r\n            }\r\n        };\r\n        GoogleEarthWidgetExample.prototype.loaded = function () {\r\n            _super.prototype.loaded.call(this);\r\n            pm3.monitor.pubsubs.subStrokeDataUpdate(this, this.strokeDataUpdate);\r\n            pm3.monitor.pubsubs.subTrainingDataUpdate(this, this.trainingDataUpdate);\r\n            if (this._ge) {\r\n                this._ge.getWindow().setVisibility(true);\r\n            }\r\n            this.paint();\r\n            this.resize();\r\n        };\r\n        GoogleEarthWidgetExample.prototype.beforeUnload = function () {\r\n            _super.prototype.beforeUnload.call(this);\r\n            pm3.monitor.pubsubs.unsubStrokeDataUpdate(this,this.strokeDataUpdate);\r\n            pm3.monitor.pubsubs.unsubTrainingDataUpdate(this,this.trainingDataUpdate);\r\n            this.stopAnimation();\r\n            if (this._ge) {\r\n                this._ge.getWindow().setVisibility(false);\r\n            }\r\n        };\r\n        GoogleEarthWidgetExample.prototype.paint = function () {\r\n            if (this.isLoaded) {\r\n            }\r\n        };\r\n        return GoogleEarthWidgetExample;\r\n    })(ergometerWidgets.ErgometerWidget);\r\n    /*------------------------------------------------------------------------------\r\n     Create and remove the widgets in the Plugin\r\n     ------------------------------------------------------------------------------*/\r\n    var ExamplePlugin = (function (_super) {\r\n        __extends(ExamplePlugin, _super);\r\n        function ExamplePlugin() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        ExamplePlugin.prototype.init = function () {\r\n            //create the widget(s) on create\r\n            dashboard.widgetRegistry().register(GoogleEarthWidgetExample, 'tijmenvangulik_examples_GoogleEarthWidgetExample', 'Google earth', ['Examples']);\r\n        };\r\n        ExamplePlugin.prototype.remove = function () {\r\n            //remove the widgets when the plugin is removed\r\n            dashboard.widgetRegistry().deregister('tijmenvangulik_examples_GoogleEarthWidgetExample');\r\n        };\r\n        return ExamplePlugin;\r\n    })(ExternalPlugin);\r\n    var plugin;\r\n    plugin = new ExamplePlugin();\r\n})(tijmenvangulik_examples_GoogleEarthWidgetExample || (tijmenvangulik_examples_GoogleEarthWidgetExample = {}));\r\n","styles":".googleEarthContainer {\n    margin-top: 20px;\n    margin-left: 4px;\n    margin-right: 4px;\n    margin-bottom:4px;\n\n}","typeScript":"/**\n * Created by tijmen on 23-12-15.\n */\nmodule tijmenvangulik_examples_GoogleEarthWidgetExample { //make a name space to prevent mix ups\n\n    declare var google : any;\n    declare function GEarthExtensions(obj) : void;\n    interface GECoordinate {\n        longitude : number;\n        latitude : number;\n        altitude? : number;\n    }\n    interface TrackPoint {\n        longitude : number;\n        latitude : number;\n        distance : number;\n        cumualtiveDistance  : number;\n        heading : number;\n    }\n    /*------------------------------------------------------------------------------\n     Simple google earth widget example\n     ------------------------------------------------------------------------------*/\n\n    class GoogleEarthWidgetExample  extends ergometerWidgets.ErgometerWidget {\n        private _trainingDistance : number;\n        private _workDistance : number;\n        private _updateDelay : number;\n        private _animating : boolean;\n        private _waitingForTimeout : boolean;\n        private _speed : number;\n        private _lastUpdateTime : number;\n        private _animatedDistance : number;\n        private _finished;\n        private _ge : any;\n        private ANIM_ALTITUDE = 1;\n        private JSAPI_KEY = 'ABQIAAAAwbkbZLyhsmTCWXbTcjbgbRSzHs7K5SvaUdm8ua-Xxy_-2dYwMxQMhnagaawTo7L1FE1-amhuQxIlXw';\n        private _scriptNode : HTMLSourceElement;\n        private _camera : any;\n        private _$map : JQuery;\n        private _geex : any;\n        private _track : TrackPoint[];\n        private _trackIndex : number = 0;\n        //private _lastWorkTime =0; //used for debugging and going longer than 100 meters\n        private _placemark;\n        private _rowerModel;\n\n        public earthInitCallback(instance ) {\n            this._ge = instance;\n            if (this.isLoaded) {\n                this._ge.getWindow().setVisibility(true);\n            }\n            this._geex = new GEarthExtensions(this._ge);\n            // add some layers\n            this._ge.getLayerRoot().enableLayerById(this._ge.LAYER_BORDERS, true);\n            this._ge.getLayerRoot().enableLayerById(this._ge.LAYER_ROADS, true);\n            this._ge.getLayerRoot().enableLayerById(this._ge.LAYER_BUILDINGS, true);\n            this._ge.getLayerRoot().enableLayerById(this._ge.LAYER_TERRAIN, false);\n            this._ge.getLayerRoot().enableLayerById(this._ge.LAYER_TREES, true);\n            //this._ge.getOptions().setMouseNavigationEnabled(false);\n\n            this._camera = this._ge.createCamera('');\n\n            google.earth.fetchKml(this._ge, \"http://www.vangulik.org/Ergometer/TheBoatRace.kml\", (kmlObject)=> {\n                // this.pathLoaded();\n                this.finishFetchKml(kmlObject);\n            });\n\n\n            this._ge.getView().setAbstractView(this._camera);\n        }\n\n        public earthFailureCallback(errorCode) {\n            app.showError(\"google earth error:\"+errorCode);\n        }\n        public trackLoaded() {\n            this._trackIndex=0;\n\n            // Placemark\n            var placemark = this._ge.createPlacemark('');\n            placemark.setName('model');\n\n            // Placemark/Model (geometry)\n            this._rowerModel = this._ge.createModel('');\n            placemark.setGeometry(this._rowerModel);\n\n            // Placemark/Model/Link\n            var link = this._ge.createLink('');\n            link.setHref('http://www.vangulik.org/Ergometer/RowerChip.dae');\n            this._rowerModel.setLink(link);\n\n            // Placemark/Model/Location\n            var loc = this._ge.createLocation('');\n            loc.setLatitude(this._track[0].latitude);\n            loc.setLongitude(this._track[0].longitude);\n            this._rowerModel.setLocation(loc);\n\n            var ori = this._ge.createOrientation('or');\n            ori.set(this._track[0].heading,0,0);\n            this._rowerModel.setOrientation(ori);\n\n            // add the model placemark to Earth\n            this._ge.getFeatures().appendChild(placemark);\n\n        }\n\n        public finishFetchKml(kmlObject) {\n\n            // check if the KML was fetched properly\n            if (kmlObject) {\n                // add the fetched KML to Earth\n\n                this._ge.getFeatures().appendChild(kmlObject);\n                var self=this;\n                self._track=[];\n                this._geex.dom.walk({\n                    rootObject: this._ge,\n                    visitCallback: function(context) {\n                        // alert(this.getType() );\n                        if (this.getType() == 'KmlPlacemark') {\n                            //alert(this.getName());\n                            self._placemark=this;\n\n                            var geo =this.getGeometry();\n\n                            if (geo.getType() ==\"KmlLineString\" || geo.getType()==\"KmlLinearRing \")  {\n\n                                var coordinates : any = geo.getCoordinates();\n\n                                var cumualtiveDistance =0 ;\n                                for(var i=0;i<coordinates.getLength()-1;i++) {\n                                    var srcCoor =coordinates.get(i);\n                                    var nextCoor =coordinates.get(i+1);\n\n                                    var distance= self.calcDistance(srcCoor.getLatitude(),srcCoor.getLongitude(),nextCoor.getLatitude(),nextCoor.getLongitude());\n\n                                    var heading=self.calcHeading(srcCoor.getLatitude(),srcCoor.getLongitude(),nextCoor.getLatitude(),nextCoor.getLongitude());\n\n                                    self._track.push({\n                                        longitude : srcCoor.getLongitude(),\n                                        latitude : srcCoor.getLatitude(),\n                                        distance : distance,\n                                        cumualtiveDistance: cumualtiveDistance,\n                                        heading: heading\n                                    });\n                                    cumualtiveDistance += distance;\n                                }\n\n\n                                //return false;\n                            }\n                        }\n                    }\n                });\n                //this._geex.util.takeOverCamera();\n                this._geex.util.flyToObject(kmlObject);\n\n                if (self._track.length>0)\n                    self.trackLoaded();\n\n\n\n            } else {\n                // wrap alerts in API callbacks and event handlers\n                // in a setTimeout to prevent deadlock in some browsers\n                app.showError(\"Can not load coarse: Bad kml file\");\n            }\n        }\n        public startAnimation() {\n            if (!this._animating && this._track && this._track.length>0) {\n                this._placemark.setVisibility(false);\n                var options =this._ge.getOptions();\n                options.setTerrainExaggeration(1);\n                //options.setOverviewMapVisibility(true);\n                options.setFlyToSpeed(this._ge.SPEED_TELEPORT);\n                google.earth.addEventListener(this._ge, 'frameend', ()=> {this.tickAnimation()});\n                this._animatedDistance=0;\n                // start it off\n                this._animating=true;\n                this._trackIndex=0;\n                this.tickAnimation();\n            }\n        }\n\n        public stopAnimation() {\n            if (this._animating) {\n                this._ge.getOptions().setFlyToSpeed(3);\n                google.earth.removeEventListener(this._ge, 'frameend',  ()=> {this.tickAnimation()});\n                this._animating=false;\n            }\n        }\n\n        public tickAnimation() {\n\n            var currentTime = new Date().getTime();\n            var timeSinceLastUpdate : number =0;\n            if (this._lastUpdateTime){\n                timeSinceLastUpdate = currentTime- this._lastUpdateTime;\n            }\n            var extrapolatedDistance=0;\n            if (this._speed && !this._finished) {\n                extrapolatedDistance= (this._speed* (timeSinceLastUpdate/1000));\n            }\n            var totalDistanceCalc=this._workDistance+extrapolatedDistance;\n            //take the next track item when moving past the current\n            var currentTrackItem=this._track[this._trackIndex];\n            while (this._trackIndex<this._track.length-1 && totalDistanceCalc>= currentTrackItem.cumualtiveDistance+ currentTrackItem.distance) {\n                this._trackIndex++;\n                currentTrackItem=this._track[this._trackIndex];\n            }\n            var heading=currentTrackItem.heading;\n            //calc the relative positon within the current track line\n            var relativeDistance= totalDistanceCalc - currentTrackItem.cumualtiveDistance;\n            if (relativeDistance<0) //do not go backwards\n                relativeDistance=0;\n            //calc the next coordinate\n            var dest = this.calcNextCoordinate(currentTrackItem.latitude, currentTrackItem.longitude, relativeDistance,\n                heading);\n\n            this._animatedDistance += relativeDistance;\n\n            var loc= this._rowerModel.getLocation();\n            loc.setLatLngAlt(dest.latitude,dest.longitude,0);\n            var ori = this._rowerModel.getOrientation();\n            ori.set(heading,0,0);\n\n            var cameraLoc = this.calcNextCoordinate(dest.latitude,dest.longitude, -20,\n                heading);\n\n            this._camera.set(cameraLoc.latitude,cameraLoc.longitude, 5, this._ge.ALTITUDE_RELATIVE_TO_GROUND,heading, 80, 0);\n\n            this._ge.getView().setAbstractView(this._camera);\n        }\n\n        /* Helper functions, courtesy of\n         http://www.movable-type.co.uk/scripts/latlong.html */\n        public calcDistance(lat1 : number, lng1 : number, lat2 : number, lng2 : number) {\n            var a = Math.sin(lat1 * Math.PI / 180) * Math.sin(lat2 * Math.PI / 180);\n            var b = Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n                Math.cos((lng2 - lng1) * Math.PI / 180);\n            return 6371000 * Math.acos(a + b);\n        }\n\n        public radians(n) {\n            return n * (Math.PI / 180);\n        }\n        public degrees(n) {\n            return n * (180 / Math.PI);\n        }\n\n        public calcHeading(startLat,startLong,endLat,endLong){\n            startLat = this.radians(startLat);\n            startLong = this.radians(startLong);\n            endLat = this.radians(endLat);\n            endLong = this.radians(endLong);\n\n            var dLong = endLong - startLong;\n\n            var dPhi = Math.log(Math.tan(endLat/2.0+Math.PI/4.0)/Math.tan(startLat/2.0+Math.PI/4.0));\n            if (Math.abs(dLong) > Math.PI){\n                if (dLong > 0.0)\n                    dLong = -(2.0 * Math.PI - dLong);\n                else\n                    dLong = (2.0 * Math.PI + dLong);\n            }\n\n            return (this.degrees(Math.atan2(dLong, dPhi)) + 360.0) % 360.0;\n        }\n\n        public calcNextCoordinate(lat : number, lng : number, dist : number, heading : number) : GECoordinate {\n            lat *= Math.PI / 180;\n            lng *= Math.PI / 180;\n            heading *= Math.PI / 180;\n            dist /= 6371000; // angular dist\n\n            var lat2 = Math.asin(Math.sin(lat) * Math.cos(dist) +\n                Math.cos(lat) * Math.sin(dist) * Math.cos(heading));\n\n            return {\n                latitude: 180 / Math.PI * lat2,\n                longitude: 180 / Math.PI *\n                (lng + Math.atan2(Math.sin(heading) * Math.sin(dist) * Math.cos(lat2),\n                    Math.cos(dist) - Math.sin(lat) * Math.sin(lat2)))};\n        }\n\n\n        public loadEarth() {\n            google.load(\"earth\", \"1\", {\n                callback: ()=> {\n                    this.earthLoaded();\n                }\n            });\n        }\n\n        public earthLoaded() {\n            google.earth.createInstance(this.name+\"Map3d\", (instance)=> {\n                    this.earthInitCallback(instance )\n                },\n                (errorCode)=> {\n                    this.earthFailureCallback(errorCode);\n                });\n        }\n\n        public initControl() {\n            super.initControl();\n            //make a canvas element within the div of the Erogmeter widget\n            var mapId =this.name+\"Map3d\";\n            this.$container.append(\n                \" <div id='\"+mapId+\"' class='googleEarthContainer'></div>\");\n            this._$map= $(\"#\"+mapId);\n\n//            if (google) {\n//             google.earth.createInstance('map3d', this.earthInitCallback, this.earthFailureCallback);\n//            }\n//          google.load(\"earth\", \"1\");\n            if( (typeof google != 'undefined') && google) {\n                this.earthLoaded()\n            }\n            else {\n                (<any>window)._jsapiLoadCallback = ()=> {\n                    this.loadEarth();\n                };\n                this._scriptNode = <HTMLSourceElement> document.createElement('script');\n                this._scriptNode .src = 'http://www.google.com/jsapi?key=' + this.JSAPI_KEY +'&callback=_jsapiLoadCallback';\n                document.body.appendChild(this._scriptNode);\n\n            }\n\n        }\n\n        public resize() {\n            super.resize();\n\n            this._$map.css({height:(this.$container.innerHeight()-24).toString()+\"px\"});\n            this.paint();\n\n        }\n\n        public strokeDataUpdate(strokeData : pm3.StrokeData) {\n            //this._workDistance = strokeData.distance + this._lastWorkTime;\n            this._workDistance = strokeData.distance;\n            this._speed=strokeData.speed;\n            this._lastUpdateTime = new Date().getTime();\n            if (!this._finished && this._speed && this._speed>0) {\n                if (!this._animating) {\n                    this.startAnimation();\n                }\n            }\n            else this.stopAnimation();\n\n        }\n\n        public trainingDataUpdate(trainingData : pm3.TrainingData) {\n\n            if (this._trainingDistance!=trainingData.distance) {\n                this._trainingDistance=trainingData.distance;\n                //get a new high score for the training distance\n                if (trainingData.distance >0 && this._workDistance==0 && this._rowerModel)\n                    this._geex.util.flyToObject(this._rowerModel);\n\n            }\n            var finished=(trainingData.endDistance>0 && trainingData.endDuration>0);\n            if (finished!=this._finished) {\n                this._finished=finished;\n                if (this._finished) {\n                    this._speed=0;\n                    this._animating=false;\n                    //this._lastWorkTime= this._lastWorkTime+ trainingData.endDistance;\n                }\n            }\n\n        }\n\n        public loaded() {\n            super.loaded();\n            pm3.monitor.pubsubs.subStrokeDataUpdate(this, this.strokeDataUpdate);\n            pm3.monitor.pubsubs.subTrainingDataUpdate(this, this.trainingDataUpdate);\n            if (this._ge) {\n                this._ge.getWindow().setVisibility(true);\n            }\n            this.paint();\n            this.resize();\n        }\n        public beforeUnload() {\n          super.beforeUnload();\n          pm3.monitor.pubsubs.unsubStrokeDataUpdate(this,this.strokeDataUpdate);\n          pm3.monitor.pubsubs.unsubTrainingDataUpdate(this,this.trainingDataUpdate);\n          this.stopAnimation();\n          if (this._ge) {\n            this._ge.getWindow().setVisibility(false);\n          }\n        }\n        public paint() {\n            if (this.isLoaded) {\n\n\n\n            }\n        }\n\n\n        constructor (controller : dashboard.Controller) {\n            super(controller);\n            this._trainingDistance=0;\n            this._workDistance=0;\n            this._updateDelay = 1000/20; //20 frames per second\n            this._animating =false;\n            this._waitingForTimeout =false;\n            this._speed=0;\n            this._finished=false;\n            this.caption = \"Google earth widget example\";\n            this.defaultWidth=2;\n            this.defaultHeight=6;\n        }\n\n    }\n    /*------------------------------------------------------------------------------\n     Create and remove the widgets in the Plugin\n     ------------------------------------------------------------------------------*/\n    class ExamplePlugin extends ExternalPlugin {\n\n        public init() {\n            //create the widget(s) on create\n            dashboard.widgetRegistry().register(GoogleEarthWidgetExample,'tijmenvangulik_examples_GoogleEarthWidgetExample','Google earth',['Examples']);\n        }\n        public remove() {\n            //remove the widgets when the plugin is removed\n            dashboard.widgetRegistry().deregister('tijmenvangulik_examples_GoogleEarthWidgetExample');\n\n        }\n    }\n\n    var plugin : ExamplePlugin;\n    plugin = new ExamplePlugin();\n\n}\n","html":"<script type=\"text/javascript\" src=\"https://earth-api-utility-library.googlecode.com/svn/tags/extensions-0.2.1/dist/extensions.pack.js\"></script>"}