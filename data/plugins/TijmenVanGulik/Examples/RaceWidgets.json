{"id":"tijmenvangulik_examples_racewidgets","name":"Example race widgets","description":"","version":"1.0","author":"Tijmen van Gulik","url":"plugins/TijmenVanGulik/Examples/RaceWidgets.json","script":"var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar tijmenvangulik_examples_RaceWidgets;\n(function (tijmenvangulik_examples_RaceWidgets) {\n    /*------------------------------------------------------------------------------\n        Simple Chart gauge widget example\n    ------------------------------------------------------------------------------*/\n    var ExampleRaceTrackWidget = (function (_super) {\n        __extends(ExampleRaceTrackWidget, _super);\n        function ExampleRaceTrackWidget(controller) {\n            var _this = _super.call(this, controller) || this;\n            _this._trainingDistance = 0;\n            _this._workDistance = 0;\n            _this._updateDelay = 1000 / 20; //20 frames per second\n            _this._animating = false;\n            _this._waitingForTimeout = false;\n            _this._speed = 0;\n            _this._finished = false;\n            _this.caption = \"Race widget example\";\n            return _this;\n        }\n        ExampleRaceTrackWidget.prototype.resize = function () {\n            _super.prototype.resize.call(this);\n            this.paint();\n        };\n        ExampleRaceTrackWidget.prototype.strokeDataUpdate = function (strokeData) {\n            this._workDistance = strokeData.distance;\n            this._speed = strokeData.speed;\n            this._lastUpdateTime = new Date().getTime();\n            if (!this._finished && this._speed && this._speed > 0) {\n                if (!this._animating) {\n                    this._animating = true;\n                    this.doAnimation();\n                }\n            }\n            else\n                this._animating = false;\n        };\n        ExampleRaceTrackWidget.prototype.trainingDataUpdate = function (trainingData) {\n            if (this._trainingDistance != trainingData.distance) {\n                this._trainingDistance = trainingData.distance;\n                //get a new high score for the training distance\n                this.paint();\n            }\n            this._finished = (trainingData.endDistance > 0 && trainingData.endDuration > 0);\n            if (this._finished) {\n                this._speed = 0;\n                this._animating = false;\n            }\n        };\n        ExampleRaceTrackWidget.prototype.loaded = function () {\n            _super.prototype.loaded.call(this);\n            pm3.monitor.pubsubs.subStrokeDataUpdate(this, this.strokeDataUpdate);\n            pm3.monitor.pubsubs.subTrainingDataUpdate(this, this.trainingDataUpdate);\n        };\n        ExampleRaceTrackWidget.prototype.beforeUnload = function () {\n            _super.prototype.beforeUnload.call(this);\n            pm3.monitor.pubsubs.unsubStrokeDataUpdate(this,this.strokeDataUpdate);\n            pm3.monitor.pubsubs.unsubTrainingDataUpdate(this,this.trainingDataUpdate);\n        };\n        ExampleRaceTrackWidget.prototype.paint = function () {\n            if (this.isLoaded) {\n                var canvas = this.canvas;\n                var context = canvas.getContext(\"2d\");\n                //clean background \n                context.lineWidth = 4;\n                context.strokeStyle = \"#4572A7\";\n                context.fillStyle = \"#FFFFFF\";\n                context.rect(0, 0, canvas.width, canvas.height);\n                context.fill();\n                var radius = 25;\n                var radiusx = radius;\n                var circleOffsetY = 20;\n                var width = canvas.width - radiusx * 2;\n                //var maxDistance= rower.trainingDistance;\n                context.fillStyle = \"#CCCCCC\";\n                context.strokeStyle = \"#CCCCCC\";\n                var currentTime = new Date().getTime();\n                var timeSinceLastUpdate = 0;\n                if (this._lastUpdateTime) {\n                    timeSinceLastUpdate = currentTime - this._lastUpdateTime;\n                }\n                var extrapolatedDistance = 0;\n                if (this._speed && !this._finished) {\n                    extrapolatedDistance = (this._speed * (timeSinceLastUpdate / 1000));\n                }\n                var relativePosition = width * ((this._workDistance + extrapolatedDistance) / this._trainingDistance);\n                var ellipseX = relativePosition + radiusx;\n                var ellipseY = radius + circleOffsetY;\n                utilities.ellipse(context, ellipseX, ellipseY, radiusx, radius);\n                context.fill();\n            }\n        };\n        ExampleRaceTrackWidget.prototype.doAnimation = function () {\n            var _this = this;\n            if (this.isLoaded && this._animating) {\n                this.paint();\n                if (this._animating && !this._waitingForTimeout) {\n                    this._waitingForTimeout = true;\n                    //use animation frames\n                    utilities.requestTimeout(function () {\n                        _this._waitingForTimeout = false;\n                        _this.doAnimation();\n                    }, this._updateDelay);\n                }\n            }\n        };\n        return ExampleRaceTrackWidget;\n    }(ergometerWidgets.CanvasWidget));\n    /*------------------------------------------------------------------------------\n        Create and remove the widgets in the Plugin\n    ------------------------------------------------------------------------------*/\n    var ExamplePlugin = (function (_super) {\n        __extends(ExamplePlugin, _super);\n        function ExamplePlugin() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        ExamplePlugin.prototype.init = function () {\n            //create the widget(s) on create\n            dashboard.widgetRegistry().register(ExampleRaceTrackWidget, 'tijmenvangulik_examples_RaceWidgetExample', 'Race', ['Examples']);\n        };\n        ExamplePlugin.prototype.remove = function () {\n            //remove the widgets when the plugin is removed\n            dashboard.widgetRegistry().deregister('tijmenvangulik_examples_RaceWidgetExample');\n        };\n        return ExamplePlugin;\n    }(ExternalPlugin));\n    var plugin;\n    plugin = new ExamplePlugin();\n})(tijmenvangulik_examples_RaceWidgets || (tijmenvangulik_examples_RaceWidgets = {}));\n","styles":"","typeScript":"module tijmenvangulik_examples_RaceWidgets { //make a name space to prevent mix ups\n\n/*------------------------------------------------------------------------------\n    Simple Chart gauge widget example\n------------------------------------------------------------------------------*/\n \n    class ExampleRaceTrackWidget  extends ergometerWidgets.CanvasWidget {\n        private _trainingDistance : number;\n        private _workDistance : number;\n        private _updateDelay : number; \n        private _animating : boolean;\n        private _waitingForTimeout : boolean;\n        private _speed : number;\n        private _lastUpdateTime : number;\n        private _finished;\n        \n        public resize() {\n\t\t\tsuper.resize();\n\t\t\tthis.paint();\n\t\t\t\n\t\t}\n\t\t\n        public strokeDataUpdate(strokeData : pm3.StrokeData) {\n            this._workDistance = strokeData.distance;\n            \n            this._speed=strokeData.speed;\n            this._lastUpdateTime = new Date().getTime();\n            if (!this._finished && this._speed && this._speed>0) {\n                if (!this._animating) {\n                    this._animating=true;\n                    this.doAnimation();\n                }\n            }\n            else this._animating=false;\n            \n        }\n        \n        public trainingDataUpdate(trainingData : pm3.TrainingData) {\n            if (this._trainingDistance!=trainingData.distance) {\n\t\t\t\tthis._trainingDistance=trainingData.distance;\n                //get a new high score for the training distance\n                this.paint();\n\t\t\t}\n\t\t\tthis._finished=  (trainingData.endDistance>0 && trainingData.endDuration>0);\n\t\t\tif (this._finished) {\n\t\t\t    this._speed=0;\n\t\t\t    this._animating=false;\n\t\t\t}\n        }\n        public loaded() {\n          super.loaded();\n          pm3.monitor.pubsubs.subStrokeDataUpdate(this, this.strokeDataUpdate);\n\t      pm3.monitor.pubsubs.subTrainingDataUpdate(this, this.trainingDataUpdate);\n        }\n        public beforeUnload() {\n          super.beforeUnload();\n          pm3.monitor.pubsubs.unsubStrokeDataUpdate(this,this.strokeDataUpdate);\n\t      pm3.monitor.pubsubs.unsubTrainingDataUpdate(this,this.trainingDataUpdate);\n        }\n\t    \n\t    public paint() {\n\t        if (this.isLoaded) {\n\t        \t\n\t        \tvar canvas= this.canvas;\n\t\t        var context=canvas.getContext(\"2d\");\n                \n                //clean background \n\t\t        context.lineWidth=4;\n\t\t\t\tcontext.strokeStyle=\"#4572A7\"\n\t\t        context.fillStyle=\"#FFFFFF\";\n\t\t        context.rect(0,0,canvas.width,canvas.height);\n\t\t        context.fill();\n\t\t        \n                var radius = 25;\n                var radiusx = radius;\n                var circleOffsetY =20;\n                var width = canvas.width-radiusx*2;\n\t\t\t\t//var maxDistance= rower.trainingDistance;\n\t\t\t\tcontext.fillStyle=\"#CCCCCC\";\n                context.strokeStyle=\"#CCCCCC\";\n                var currentTime = new Date().getTime();\n                var timeSinceLastUpdate : number =0;\n                if (this._lastUpdateTime){\n                    timeSinceLastUpdate = currentTime- this._lastUpdateTime;\n                }\n                var extrapolatedDistance=0;\n                if (this._speed && !this._finished) {\n                    extrapolatedDistance= (this._speed* (timeSinceLastUpdate/1000));  \n                }\n                \n                \n\t\t\t\tvar relativePosition = width * ((this._workDistance+extrapolatedDistance)/ this._trainingDistance) ;\n\t\t\t\tvar ellipseX =  relativePosition+radiusx;\n                var ellipseY = radius+circleOffsetY;\n                utilities.ellipse(context,\n                    ellipseX,ellipseY,\n                    radiusx, radius\n                );\n                context.fill();\n\t            \n\t        }\n        }\n        \n        public doAnimation() {\n            \n            if (this.isLoaded && this._animating) {\n                this.paint();\n                if (this._animating && !this._waitingForTimeout) {\n                    this._waitingForTimeout = true;\n                    //use animation frames\n                    utilities.requestTimeout(\n                        () => {\n                            this._waitingForTimeout = false;\n                            this.doAnimation();\n                        },this._updateDelay);\n                }\n            }\n        }\n        constructor (controller : dashboard.Controller) {\n            super(controller);\n            this._trainingDistance=0;\n            this._workDistance=0;\n            this._updateDelay = 1000/20; //20 frames per second\n            this._animating =false;\n            this._waitingForTimeout =false;\n            this._speed=0;\n            this._finished=false;\n\t\t\tthis.caption = \"Race widget example\";\n\t\t\t\n\t\t}\n        \n\t}\n/*------------------------------------------------------------------------------\n    Create and remove the widgets in the Plugin\n------------------------------------------------------------------------------*/\n    class ExamplePlugin extends ExternalPlugin {\n        \n        public raceTrackWidget : ExampleRaceTrackWidget;\n\n        \n        public init() {\n            //create the widget(s) on create\n            dashboard.widgetRegistry().register(ExampleRaceTrackWidget,'tijmenvangulik_examples_RaceWidgetExample','Race',['Examples']);\n        }\n        public remove() {\n            //remove the widgets when the plugin is removed\n            dashboard.widgetRegistry().deregister('tijmenvangulik_examples_RaceWidgetExample');\n        }               \n    }\n\n    var plugin : ExamplePlugin;\n    plugin = new ExamplePlugin();\n    \n}\n","html":""}